<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyWonderful的小窝</title>
  
  <subtitle>Be HardWorking Every Day.</subtitle>
  <link href="https://joywonderful.github.io/atom.xml" rel="self"/>
  
  <link href="https://joywonderful.github.io/"/>
  <updated>2024-01-01T07:37:46.862Z</updated>
  <id>https://joywonderful.github.io/</id>
  
  <author>
    <name>JoyWonderful</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些随笔记录和想法</title>
    <link href="https://joywonderful.github.io/posts/seventh-lianbi/"/>
    <id>https://joywonderful.github.io/posts/seventh-lianbi/</id>
    <published>2023-12-31T09:20:14.000Z</published>
    <updated>2024-01-01T07:37:46.862Z</updated>
    
    <content type="html"><![CDATA[<style>    .hide-blur {        filter: blur(5px);        transition: filter .1s    }    .hide-blur:hover {        filter: none;    }    .lianbi-block p:not(.pinyu) {        text-indent: 2ic;        line-height: 1.5;        margin-bottom: .2em;    }    .lianbi-block .lianbi-title {        font-weight: bold;        text-align: center;        display: block;    }    .lianbi-block .gdg {        text-decoration: #d60000 wavy underline;        text-decoration-thickness: 1px;    }    .lianbi-block .pinyu {        color: #d60000;        font-family: fangsong;        font-weight: 900;        line-height: 1.5;        text-align: right;        margin: 0 0 1em;        display: block;    }    .lianbi-block#lianbi3 del {        background-color: #999;    }</style><p><strong>写在前面的废话：</strong><br>又是一篇分类于“琐碎”的文章。<br>加上这篇文章，这个分类下<del>才</del>有三篇文章。想来这个博客在运行 <code>hexo init</code> 之初，我就没想过写生活向的文章。如今“琐碎”下，一篇是画，两篇是作文收集，勉强算是透露了点生活向。<br>想想自己喜欢的，是 HTML, CSS, JavaScript 给我带来的<strong>样式美化</strong>、<strong>多样性</strong>和<strong>自主性</strong>。不然我怎么不记到 .txt 里呢？也不知初衷是什么，唉，这样弄又有些喧宾夺主了。多年后看到，也就微微一笑，笑自己写出的东西<span class="hide-blur" balloon-shown="up" aria-label="看它有什么用呢">古怪？</span>吧。</p><span id="more"></span><p>下面，红字和红色波浪线都是老师做的标记。红字是批语。红线大概是老师认为有想法的句子吧。<br><strong>按时间排序的文章：</strong></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block">    <span class="lianbi-title" aria-label="这篇文章有些假，自己不太喜欢" balloon-shown="up">运动会跳高随记</span>    <p>我在操场上观看男子跳高。哪怕只讲跳高场地的气氛也是十分紧张激烈得了。运动员刚跳完，学生裁判和助理就飞快地冲上去把杆子重新架好，再用手推或脚踢将软垫重新压紧实，另一位运动员又跑步向前，一跃而起，脸上带着坚定和紧张。节奏之快，把观众观赛的热情都点燃了。</p>    <p>这时，一位跳高运动员吸引了我的注意。根据他服装上的号码牌，我得知他是四班的一名运动员。他起跳了，但没有跳过，带着杆子跌向软垫。我感觉，他脸上写满不甘心与不服输，他和教师裁判要求再跳一遍。于是，我看到他咬紧牙关，再次冲向调高杆，似乎把腿尽可能地抬高，落向软垫——但他又失败了，脚带动杆子滑落下来，杆子落到地上发出哗啦一声。这声音对他来说可能是震天动地的，意味着失败的响声。我看到他再一次向裁判要求重新跳。我从我们班作为跳高裁判助理的施同学口中得知，如果失败，这次起跳是最后一次了。<span class="gdg">忽地，我联想到了一个人的坚定和决绝，这是不太容易做到的。这一次，他像鸟儿一样轻捷，越过杆子，似乎还有些紧张，但稳稳地落到软垫上，他成功了。</span></p>    <p style="margin:0">我知道，在把杆子升高增加难度后，他最后一次失败了，退出了比追逐战还要激烈的跳高比赛。但能这样重复要求重新跳一次，连续跳三次的精神已经很好了，这是运动员的精神，因而留给我很深的印象。我坐在看台上喝奶茶时想到，尽管他是四班的，而我是三班的人。</p>    <p class="pinyu" style="margin-right:12ch;">运动精神感染每一个人.</p></blockquote><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>这篇文章是开完运动会老师叫写的<del>（废话）</del>。个人认为这届初中运动会不如小学的时候有那种热情、激动、高兴等等开运动会的感觉了。一方面因为<strong aria-label="流感横行" balloon-shown="up" style="border-bottom:1px dotted">延期</strong>和<strong aria-label="三天缩水成两个下午" balloon-shown="up" style="border-bottom:1px dotted">运动会时间的缩短</strong>，更重要的另一方面<strong>运动会项目减少</strong>、就在<strong>一个操场</strong>看、<strong>不写通讯稿</strong>，对于我来说<span aria-label="从第一次运动会到现在，我就没参加过比赛" balloon-shown="up" style="border-bottom:1px dotted">乐趣</span>都没了。这篇作文 30% 都不算真实感受。<br>至于真实事件，主要是因为有同班同学在跳高场地那儿当助理（也就是扶扶杆子）便跑到那儿和同学聊聊天。男子跳高我们班没人参加，去那儿只为<strong>聊天</strong>（还顺便当好人帮同学扔橘子皮？）。四班体委跳高，看了看，感觉那种跳了三次的事件适合写到作文里，回家一想到就写了。</p><p>至于老师的评语嘛，<span aria-label="包括句尾的一点" balloon-shown="up" style="border-bottom:1px dotted">原话是这样写的</span>，也不知道老师写这个是不是想到了什么。大概没什么别的深意。</p><p><strong>题外话：</strong>那天有奶茶和泡芙供应，只喝了一瓶不知名品牌普通奶茶，味道还好。其他同学吃喝也蛮开心的。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><h3 id="记录-1"><a href="#记录-1" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block">    <span class="lianbi-title" aria-label="不好说自己写这篇文章时的精神状态" balloon-shown="up">周五那些琐碎事</span>    <p>此刻，我正坐在微格教室里，写这篇随记。自修的时间大家都很安静，只有教室里不知什么设备发出低沉且有规律的“咚咚”声，正是回忆和写作的耗时间，想想在一个半小时之前发生的琐事，我想。</p>    <p>下午，五点，同学们乱哄哄地换完了座位，准备排队出校。而包括我的四个人却还要留在学校里，这真的是一种很奇特的感觉，我在独自去往食堂时想到。几个同学吃完了饭回到教室，有打扫一会儿卫生才去微格教室准备上课。来到微格教室，看到教室的布局，让我想到了母校的微格教室，给人一种很宁静的感觉。原本着急上完课，着急回家的心绪也平静下来。在现在想，<span class="gdg">大概是这种平静才是名词里“素养”与“提升”的感觉，竟有一种置身世外的超然感。</span></p>    <p>这次科学老师上课，居然没有数学课那样急切，没有争分夺秒的感觉，甚至没有往常的节奏快。不知是我心里的主观认为还是微格教室的影响。还是给人一种宁静感，甚至悠闲，但又不是。现在想，那种感觉确实是<span class="gdg">安心学习的基础啊，不急功近利，而是宁静平和，甚至有限，轻松，太急躁反而容易犯错呢。我想。</span></p>    <p>平时的课一般上一个小时，数学课通常还要拖几分钟，因为任务太多了。但这次不一样，宁静的教室，没有是么非常紧迫的任务。科学老师只上了半个小时的课，刚好在第一节晚自习一半的铃声响起时讲完了作业，剩下的时间老师让我们自修。一切都是平静的。于是，我开始写随记，也就是开头呈现的景象，一切都给人以平静，安静的感觉。</p>    <p>想着想着，自修已经到了末尾，班里的同学开始吵闹起来，打破了原有的宁静，以及原有的那份奇特的心境。我意识到，我还要进行枯燥、有条不紊、节奏快的生活。生活的节奏很快，这种宁静是很难再找到了。我想找一句话来总结我的所思所想所写，但周围不再宁静，脑海中全是纷乱的思绪，如同一大片散乱的拼图，十分烦躁。突然几句话拨开纷乱的拼图“夫学须静也，才须学也。”“淫慢则不能励精，险躁则不能治性”。是的，无论干什么，都需要平静，需要宁静专一。宁静，不仅让人放松，还让人奋斗。</p>    <p>正准备盖上笔合上本子，却又有一个想法冒出来，我翻到前面看了看开头的自己，抿嘴笑了，添上一句话：</p>    <p style="margin:0">从本文开头到结尾，细微的自己变化和涂改状况能看出，这间教室和我在写这篇文章时的宁静与否吧？</p>    <span class="pinyu" style="margin-right:15ch">“静能生慧”，一直觉得你是个能<br>“沉得住气”的孩子，很棒哦！</span></blockquote><h3 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h3><p>因为那天开家长会，照理说是所有学生都不用上<span aria-label="“双减”政策，你值得拥有！" balloon-shown="up" style="border-bottom:1px dotted">晚自习</span>五点就回家的。但是我非常遗憾地参加了<del>光明<strong>优倍</strong>鲜牛奶班</del><strong aria-label="某重点中学搞出的“提前批”政策，导致所谓培优班出现" balloon-shown="up" style="border-bottom:1px dotted" class="hide-blur">培优班</strong>，得继续留在学校，上一个小时的<span class="hide-blur">培优班</span>，再写作业写到八点晚自习放学。就感觉很离谱，吐槽一下。<br>实际上，我们四个<span class="hide-blur">培优班</span>的同学吃完了饭确实<em>受老师委托</em>回到教室打扫卫生，才去的微格教室。平常的课都在二班旁边的普通教室上，这次去微格教室<span aria-label="家长会先在报告厅开，后来到各班教室开" balloon-shown="up" style="border-bottom:1px dotted">大概是为了不打扰家长会</span>吧。<br>那天语文课和科学课换了，上的是科学课。老师说就讲三十分钟作业，剩下时间自修，就那样做了。我大概写了五十分钟的其他作业，剩下的时间都拿来写上面这篇作文了。当时想不到写什么好，<span aria-label="每次我都这样做" balloon-shown="up" style="border-bottom:1px dotted">干脆直接写当时场景了</span>。其实也是想在作文里“诉说不易”吧。</p><p>至于老师的评价。。。很难确定老师理解到的是我想写什么，甚至连我自己也不清楚了。也不知道老师为什么评价的字写得比上一篇大。</p><p>附：真不想写“<span class="hide-blur">培优班</span>”三个字。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><div class="note danger"><p style="color:#d9534f;margin-bottom:0px;font-weight:bold;">地名替换</p><span>原作文中有真实地名，为了避免泄露信息，使用划掉的“占位”进行了替换。<br>显示为这样：</span><span style="text-decoration:line-through;background-color:#999;">占位</span></div><h3 id="记录-2"><a href="#记录-2" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block" id="lianbi3">    <span class="lianbi-title"><del>占位</del>旅途记</span>    <p>在<del>占位</del>，说起<del>占位岛</del>就让人想起连接<del>占位岛</del>与大陆的那座桥和“海洋”这个字眼来。又是两天后，坐在教室里，细细地回想两到四天前的事。</p>    <p>海洋和桥，自然是在路上看到的。从<del>占位</del>海边到<del>占位岛</del>上的路就值得一提。经过<del>（占位占线）</del>和<del>占位占路</del>，我看到了海、海港和船只。基本只在城区待着的我没见过这般略显壮观的景象，立刻被吸引了：<span class="gdg">一排排轮船靠在岸边，船身下的水些许浑黄，仿佛同船一起睡着。海港在休息，但不减其威严气势，自然很引人注目。</span>和庞大的轮船与广阔无垠的海比起来，“小”客车自然没趣。突然间想到“海洋文化”正是这种意蕴。客车走上山路，越走越高。刹那间，眼前凭空出现一座仿佛横跨海面的桥。我的目光立刻又被桥捉了去。桥的支点是在两边的山上的，桥下面没有柱子支撑，所以看起来仿佛悬浮在海面上，桥也很高。车接近了桥，越发显得小了。还没上桥，就已觉得桥下海之广袤。走在桥上，仿佛神话中天神自由在空中行走，越过海洋。</p>    <p>过了桥，便上了岛。又走了一会儿，到了活动基地。基地中发生的事反而没让我想到大海的悠远，似乎没什么特别让人印象深刻的事。海边桥上车中，自我上的一节课更让我印象深刻得多。</p>    <p style="margin:0">海的<span class="gdg">广阔，如广阔得胸怀，容纳着船只和桥。船只和桥也容纳着其他事物。它们相互包容，相对广阔包容相对渺小的。这是海洋的精神：</span>包容。同样地，我们也得学习传承海洋文化精神。想来，这也算是<del>占位</del>之旅给我带来的收获——包容和责任。</p>    <span class="pinyu" style="margin-right:3ch">多去外面走走，会有记很多不一样<br>的启示.</span></blockquote>]]></content>
    
    
    <summary type="html">&lt;style&gt;
    .hide-blur {
        filter: blur(5px);
        transition: filter .1s
    }
    .hide-blur:hover {
        filter: none;
    }
    .lianbi-block p:not(.pinyu) {
        text-indent: 2ic;
        line-height: 1.5;
        margin-bottom: .2em;
    }
    .lianbi-block .lianbi-title {
        font-weight: bold;
        text-align: center;
        display: block;
    }
    .lianbi-block .gdg {
        text-decoration: #d60000 wavy underline;
        text-decoration-thickness: 1px;
    }
    .lianbi-block .pinyu {
        color: #d60000;
        font-family: fangsong;
        font-weight: 900;
        line-height: 1.5;
        text-align: right;
        margin: 0 0 1em;
        display: block;
    }
    .lianbi-block#lianbi3 del {
        background-color: #999;
    }
&lt;/style&gt;

&lt;p&gt;&lt;strong&gt;写在前面的废话：&lt;/strong&gt;&lt;br&gt;又是一篇分类于“琐碎”的文章。&lt;br&gt;加上这篇文章，这个分类下&lt;del&gt;才&lt;/del&gt;有三篇文章。想来这个博客在运行 &lt;code&gt;hexo init&lt;/code&gt; 之初，我就没想过写生活向的文章。如今“琐碎”下，一篇是画，两篇是作文收集，勉强算是透露了点生活向。&lt;br&gt;想想自己喜欢的，是 HTML, CSS, JavaScript 给我带来的&lt;strong&gt;样式美化&lt;/strong&gt;、&lt;strong&gt;多样性&lt;/strong&gt;和&lt;strong&gt;自主性&lt;/strong&gt;。不然我怎么不记到 .txt 里呢？也不知初衷是什么，唉，这样弄又有些喧宾夺主了。多年后看到，也就微微一笑，笑自己写出的东西&lt;span class=&quot;hide-blur&quot; balloon-shown=&quot;up&quot; aria-label=&quot;看它有什么用呢&quot;&gt;古怪？&lt;/span&gt;吧。&lt;/p&gt;</summary>
    
    
    
    <category term="琐碎" scheme="https://joywonderful.github.io/categories/%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="作文" scheme="https://joywonderful.github.io/tags/%E4%BD%9C%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 建立静态博客记录</title>
    <link href="https://joywonderful.github.io/posts/hexo-pretty/"/>
    <id>https://joywonderful.github.io/posts/hexo-pretty/</id>
    <published>2023-12-26T07:35:17.000Z</published>
    <updated>2023-12-26T07:35:17.233Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是为了记录自己用 Hexo 建站（主题 NexT）的经过，方便他人查阅和自己以后用。<br>关于 Hexo 的准备，可以看<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/docs/index.html">官方文档 <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，关于主题 NexT 的，可以看 <a target="_blank" rel="noopener" href="https://theme-next.js.org/docs/">这里 <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a></p><p>如果你是的阅读目的是准备第一次使用 Hexo 搭博客，可以遵照本文提示看。<br>如果你准备美化你的 Hexo（最好且主题为 NexT）的博客，可以跳到<a href="#更多修改"><i class="fa fa-hashtag fa-sm"></i>更多高阶美化</a></p><div class="note info"><p style="color:#428bca;margin-bottom:0px;font-weight:bold;">操作系统的异同</p><span>各种操作系统的过程基本一致。本文中的安装环境的主要做法是直接通过官网下载安装，其他下载方法也可行，这里不列举。</span></div><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载、准备环境"><a href="#下载、准备环境" class="headerlink" title="下载、准备环境"></a>下载、准备环境</h3><p>如果还没有安装 <a target="_blank" rel="noopener" href="https://git-scm.com/download/">Git <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，去官网下载。Hexo 部署需要用到。</p><p>Hexo 是基于 Node.js 开发的，若未安装，需要先安装 <a target="_blank" rel="noopener" href="https://nodejs.org/en">Node.js <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，两个版本都可以。安装完毕后打开终端检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v18.16.0</span><br><span class="line">$ npm -v</span><br><span class="line">9.5.1</span><br><span class="line">$ npx -v</span><br><span class="line">9.5.1</span><br></pre></td></tr></table></figure><p>当三个命令都正常显示版本号时，就安装成功了。</p><p>随后，下载 Hexo 包。执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: ...</span><br><span class="line"><span class="comment"># 出现一些依赖包的版本号表示安装成功</span></span><br></pre></td></tr></table></figure><p>随后，可以开始建立站点文件夹了。执行以下命令初始化 Hexo 站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog <span class="comment"># 文件夹的名字，自己可更改，同下</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>此时，站点文件夹已新建完毕。目录大概是这样（<code>......</code> 表示省略了很多文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├─ .github</span><br><span class="line">│   └─ dependabot.yml</span><br><span class="line">├─ node_modules</span><br><span class="line">│   ├─ .bin</span><br><span class="line">│   └─ ......</span><br><span class="line">├─ scaffolds</span><br><span class="line">│   ├─ draft.md</span><br><span class="line">│   ├─ page.md</span><br><span class="line">│   └─ post.md</span><br><span class="line">├─ source</span><br><span class="line">│   └─ _posts</span><br><span class="line">│       └─ hello-world.md</span><br><span class="line">├─ themes</span><br><span class="line">│   └─ .gitkeep</span><br><span class="line">├─ _config.landscape.yml</span><br><span class="line">├─ _config.yml</span><br><span class="line">├─ package-lock.json</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><p>随后，可以在本地运行查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><div class="note info"><p style="color:#428bca;margin-bottom:0px;font-weight:bold;">端口占用</p><span>如果出现 <code>FATAL Port 4000 has been used. Try other port instead.</code> 说明默认的 4000 端口被占用。逐一排查或解决：</span><ol>    <li>排查是否是 Hexo <strong>已经运行了一个服务</strong>。（不同终端）<br>解决：终端内按 Ctrl+C 终止那个已经运行的 Hexo 服务。</li>    <li>排查有无<strong>其他应用占用端口</strong><br>解决：关闭占用端口的应用。</li>    <li>以上两个方案都不可行。<br>解决：运行命令 <code>hexo s -p [number]</code> 更改端口。，[number] 为 4000 以上的数字，例如：<code>hexo s -p 8080</code></li></ol></div><p>访问 <code>http://localhost:4000/</code> 查看效果。初始的欢迎页面大概是这个样子：<br><img src="https://s2.loli.net/2023/12/16/yJkrlimAp6TWK8x.jpg" alt="local-hexo-landscape.jpeg"></p><div class="note warning"><p style="color:#f0ad4e;margin-bottom:0px;font-weight:bold;">出现问题</p><span>如果以上步骤完成后出现无法访问的情况，可能是什么步骤出现了问题。若找不到原因，删除工作文件夹后以上步骤逐一排查，重试一遍以后一般都会正常。<span></div><p>自此，完成了站点文件环境的准备。<strong>以下的步骤都在这个文件夹内进行</strong>，<strong>文中相对文件路径父目录为这个文件夹</strong>。</p><h3 id="站点整体设置"><a href="#站点整体设置" class="headerlink" title="站点整体设置"></a>站点整体设置</h3><p>打开站点文件夹中的 <code>_config.yml</code>，这个文件是 Hexo 站点的整体设置。初始时的内容大概是这个：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">syntax_highlighter:</span> <span class="string">highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一些刚建站会用到的配置的解释：</p><ul><li><strong><code>title</code></strong>: 网站标题。显示在 HTML <code>&lt;title&gt;&lt;/title&gt;</code> 和网站标题位置。</li><li><strong><code>subtitle</code></strong>: 网站副标题。显示在网站标题下面，小字。</li><li><strong><code>author</code></strong>: 网站所有者。通常显示在网站底部版权的地方。</li></ul><p>其他的以后慢慢会用到。先把上面三个站点的信息填好吧。</p><div class="note warning"><p style="color:#f0ad4e;margin-bottom:0px;font-weight:bold;">YAML 格式</p><span>对于第一次使用 YAML 的很容易漏掉<strong>选项后的空格</strong>。<br>正确：<code>theme: landscape</code><br>错误：<code>theme:landscape</code></span></div><h3 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h3><p>没有太多好说的。就在这里列举。</p><table><thead><tr><th align="left">命令</th><th align="left">缩写</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>hexo init &lt;folder&gt;</code></td><td align="left"><code>hexo i</code></td><td align="left">新建一个站点文件夹 <code>&lt;folder&gt;</code>，Hexo 会通过 Git clone <a href="https://github.com/hexojs/hexo-starter">hexo starter</a>, <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-scape</a> 并通过 NPM 下载部分依赖。</td></tr><tr><td align="left"><code>hexo list &lt;type&gt;</code></td><td align="left"><code>hexo l &lt;type&gt;</code></td><td align="left">在命令行获取站点数据。<code>&lt;type&gt;</code> 值为 <code>page</code> <code>post</code> <code>route</code> <code>tag</code> <code>category</code>，例如 <code>hexo l post</code> 列出所有文章。</td></tr><tr><td align="left"><code>hexo new &lt;post&gt;</code></td><td align="left"><code>hexo n &lt;post&gt;</code></td><td align="left">写一篇新文章，让 Hexo 在 .&#x2F;source&#x2F;_posts&#x2F; 下生成名为 <code>&lt;post&gt;.md</code> 的文件。</td></tr><tr><td align="left"><code>hexo generate</code></td><td align="left"><code>hexo g</code></td><td align="left">让 Hexo 生成站点文件。</td></tr><tr><td align="left"><code>hexo server</code></td><td align="left"><code>hexo s</code></td><td align="left">在本地运行网站，查看效果。</td></tr><tr><td align="left"><code>hexo clean</code></td><td align="left"></td><td align="left">清除生成的网页。</td></tr><tr><td align="left"><code>hexo deploy</code></td><td align="left"><code>hexo d</code></td><td align="left">部署站点。需要配置和依赖，下面会讲到。</td></tr></tbody></table><p>通常来说，写完文章后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d <span class="comment"># -m &quot;...&quot;     # commit 信息，可选</span></span><br></pre></td></tr></table></figure><h2 id="部署到-Github-Pages"><a href="#部署到-Github-Pages" class="headerlink" title="部署到 Github Pages"></a>部署到 Github Pages</h2><p>博客自然需要进行部署，本地运行的博客别人看不到。我当时选择部署到 <a target="_blank" rel="noopener" href="https://github.io">Github Pages <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>。<br>所以，当时注册了 Github（若未注册，先<a target="_blank" rel="noopener" href="https://github.com/signup">注册 Github <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>），然后连接本地，参照<a href="/posts/git-github/">Git 的连接 Github 小记</a>进行连接。<br>完成后，创建一个新的仓库，名为 <code>&lt;username&gt;.github.io</code>，<code>&lt;username&gt;</code> 为自己的用户名。打开 <span style="font-family:consolas,monospace;">Settings -&gt; Page</span>，确保 Branch 已选择。</p><p>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>随后打开 _config.yml 文件，找到 <code>deploy</code> 字样，更改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span> <span class="comment"># &lt;username&gt; 是你的 github 用户名</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 具体看自己储存库的分支</span></span><br></pre></td></tr></table></figure><p>更改完毕后，就可以运行 <code>hexo d</code> 部署到 Github Pages 了。访问 <code>https://&lt;username&gt;.github.io</code>，如果第一次部署，未显示就多等一会儿。完成后，就可以看到网站了。</p><h2 id="修改和美化"><a href="#修改和美化" class="headerlink" title="修改和美化"></a>修改和美化</h2><h3 id="下载主题-NexT"><a href="#下载主题-NexT" class="headerlink" title="下载主题 NexT"></a>下载主题 NexT</h3><p>NexT 是一个很简洁美观且不断维护的 Hexo 主题。这个博客就是 Next 主题。<br>首先，进行下载，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git</span><br></pre></td></tr></table></figure><p>完成后，打开 config.yml，找到 <code>theme</code> 字样，更改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-next</span></span><br></pre></td></tr></table></figure><p>找到 <code>language</code> 字样，更改其值为 <code>zh-CN</code>。</p><p>此时本地运行大概是这个样子：<br><img src="https://s2.loli.net/2023/12/17/4s6k3eWmn8DJYUd.jpg" alt="test-theme-next"></p><p>可以根据需要更改 NexT 主题。打开 themes&#x2F;hexo-theme-next&#x2F;_config.yml（主题配置文件）找到 <code>scheme</code> 字样，选择一个去掉 <code>#</code> 注释，把原本的用 <code>#</code> 注释上。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>主题效果（图片和演示链接）：</p><div class="tabs" id="themeshow"><ul class="nav-tabs"><li class="tab"><a href="#themeshow-1">Muse</a></li><li class="tab"><a href="#themeshow-2">Mist</a></li><li class="tab"><a href="#themeshow-3">Pisces</a></li><li class="tab active"><a href="#themeshow-4">Gemini</a></li></ul><div class="tab-content"><div class="tab-pane" id="themeshow-1"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cBmn.png" alt="muse"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/muse/">https://theme-next.js.org/muse/</a></p></div><div class="tab-pane" id="themeshow-2"><p><img src="https://s11.ax1x.com/2023/12/17/pi5crT0.png" alt="mist"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/mist/">https://theme-next.js.org/mist/</a></p></div><div class="tab-pane" id="themeshow-3"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cDwq.png" alt="pisces"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/pisces/">https://theme-next.js.org/pisces/</a></p></div><div class="tab-pane active" id="themeshow-4"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cykV.png" alt="gemini"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a><br><em><strong>自己用了这个 NexT 主题</strong></em>，敲好看的。</p></div></div></div><h3 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h3><h4 id="主页面"><a href="#主页面" class="headerlink" title="主页面"></a>主页面</h4><p>原本的文章链接为 <code>YYYY/MM/DD/:title</code>(例如 <code>/2023/11/04/hello</code>)，一大串日期很难看。我当时把他改为了 <code>posts/:title</code>，这样有很高的自由度（标题自定义）的同时保证了链接简短。<br>打开整体设置 _config.yml，找到 <code>permalink</code>，更改为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://example.com</span><br><span class="line"><span class="deletion">- permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="addition">+ permalink: posts/:title/</span></span><br></pre></td></tr></table></figure><p>当文章多的时候，一整页默认有十篇文章，很长，可以减小。<br>打开整体设置 _config.yml，找到 <code>per_page</code>，将它的的值更改为 <code>5</code>。这样每一页就会简约得多。</p><p>自定义浏览器里标签的图标<br>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>favicon</code>，把自己的图标放到 theme&#x2F;hexo-theme-next&#x2F;source&#x2F;images 内。三种尺寸：16x16、32x32、原大小、原大小 分别对应 <code>small</code> <code>medium</code> <code>apple_touch_icon</code> <code>safari_pinned_tab</code>，将其相应位置填写好。例如我这个博客的配置是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/icon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/icon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/icon.png</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure><h4 id="菜单栏，新页面"><a href="#菜单栏，新页面" class="headerlink" title="菜单栏，新页面"></a>菜单栏，新页面</h4><p>此时，新博客只有两大主页面：文章，主页。这未免有些太单薄，最好有个分类标签一类的。NexT 已经帮我们做好了。<br>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>menu</code>，把 <code>home</code> <code>tags</code> <code>categories</code> <code>archives</code> 前面的 <code>#</code> 注释都去掉。大概是这个样子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>你也可以更改 “<code>||</code>” 之后的图标，去 <a href="https://fontawesome.com/icons">font-awesome.com</a> 用英文搜索你想要的图标。例如 <code>fa-rectangle-list</code> 显示为 <i class="fa fa-rectangle-list"></i></p><p>随后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>完成后打开 source&#x2F;tags&#x2F;index.md，在两个 <code>---</code> 内新加一行 <code>type: tags</code>；<br>同样地，打开 source&#x2F;tags&#x2F;index.md，加一行 <code>type: categories</code>。<br>顺便你也可以更改它们的 <code>title</code> 值分别为 标签 和 分类。</p><p>完成以上所有步骤后，你我期待的像样的一个博客诞生了。此时，新拥有博客的人可以开始<a href="#写作"><i class="fa fa-hashtag fa-sm"></i>写作</a>了</p><h3 id="更多修改"><a href="#更多修改" class="headerlink" title="更多修改"></a>更多修改</h3><h4 id="CSS-Stylus-方面"><a href="#CSS-Stylus-方面" class="headerlink" title="CSS(Stylus) 方面"></a>CSS(Stylus) 方面</h4><p>在 source 文件夹下新建文件夹 _data，在 source&#x2F;_data 下新建文件 styles.styl，根据下面的代码注释插入你需要的内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏顶部线条</span></span><br><span class="line"><span class="selector-class">.headband</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顶部边距</span></span><br><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  +<span class="built_in">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片圆角</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧边栏圆角</span></span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-brand-container</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> -<span class="number">1px</span> <span class="number">0.5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.09</span>);</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">24px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文章圆角</span></span><br><span class="line"><span class="selector-class">.main-inner</span> <span class="selector-class">.sub-menu</span>, <span class="selector-class">.main-inner</span> <span class="selector-class">.post-block</span>, <span class="selector-class">.main-inner</span> <span class="selector-class">.tabs-comment</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.comments</span>, <span class="selector-class">.main-inner</span> <span class="selector-class">.comment-position</span> <span class="selector-class">.comments</span>, <span class="selector-class">.main-inner</span> <span class="selector-class">.pagination</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加背景图片</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(/pic/background3.png);</span><br><span class="line">      <span class="attribute">background-size</span>: cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">      <span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>custom_file_path</code>，把 style 子项的注释去掉。更改成这个样子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyStart: source/_data/post-body-start.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>以后可以根据自己的需要慢慢更改 styles.styl 的内容。</p><div class="note danger"><p style="color:#d9534f;margin-bottom:0px;font-weight:bold;">注意备份</p><span>任何修改都有可能出现错误，建议多进行<strong>备份</strong>原生成文件。有必要的话使用 git 进行<strong>版本控制</strong>，备份到远程仓库。否则出现错误很难改回来。尤其是更改了很多的时候。</span></div><h4 id="插件：搜索功能-hexo-generator-searchdb"><a href="#插件：搜索功能-hexo-generator-searchdb" class="headerlink" title="插件：搜索功能 hexo-generator-searchdb"></a>插件：搜索功能 hexo-generator-searchdb</h4><p>运行以下命令下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 local_search 项，更改如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure><p>此时，在菜单栏中的搜索已出现，可以点击并键入进行搜索了。</p><h4 id="插件：置顶功能-hexo-generator-index-pin-top"><a href="#插件：置顶功能-hexo-generator-index-pin-top" class="headerlink" title="插件：置顶功能 hexo-generator-index-pin-top"></a>插件：置顶功能 hexo-generator-index-pin-top</h4><p>运行以下命令下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>如果需要置顶一篇文章，在这篇文章的 Front-matter 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>可以给置顶的文章增加标识。在 source&#x2F;data 下新建文件 post-meta.njk：</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> post.top %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding-left: 8px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-right: 8px;&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">color</span>=<span class="string">black</span> <span class="attr">style</span>=<span class="string">&quot;color: #000000; font-weight: bold; padding-left: 4px;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumbtack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: #000000; font-weight: bold; padding-left: 4px;&quot;</span>&gt;</span> 置顶 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>custom_file_path</code>，把 postMeta 的注释去掉。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>运行 <code>hexo new name</code> 就可以在 source&#x2F;_posts 下新建一篇名为 name.md 的文章。原本是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">date:</span> </span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>两个 <code>---</code> 之内的内容叫做 Front-matter，它是这个文章的信息（变量）。以下是会增加和修改的东西：</p><ul><li><code>title</code>: 文章标题</li><li><code>date</code>: 建立日期</li><li><code>tags</code>: 标签，可以有多个。</li><li><code>categories</code>: 分类，可以有多个。</li></ul><p>多个标签的标注方法用 <code>-</code> 多行，多个同级分类用 <code>- []</code>，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">生活</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">美好</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">生活</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">美好</span>]</span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这样，这篇文章就有两个标签，两个分类。</p><p>进行正常写作时使用 Markdown 语法，或者可以安装其他插件使用其他语言写作。</p><div class="note warning"><p style="color:#f0ad4e;margin-bottom:0px;font-weight:bold;">警告</p><span>写了好长时间，还相当于自己又建了一个博客，不建议像我这样写这么长的文章（狗头）<br>开玩笑的啦~<br>工作区终于清静了。。。</span></div><script>    Toast.fire({        icon: "warning",        html: "文章<strong>很长</strong>，建议<kbd>Ctrl</kbd>+<kbd>F</kbd>查找自己需要的内容。"    }).then(() => {Toast.fire({icon:"question",text:"一般也没人看到啊。。。"});});</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章主要是为了记录自己用 Hexo 建站（主题 NexT）的经过，方便他人查阅和自己以后用。&lt;br&gt;关于 Hexo 的准备，可以看&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://hexo.io/zh-cn/docs/index.html&quot;&gt;官方文档 &lt;i class=&quot;fa fa-arrow-up-right-from-square&quot; style=&quot;font-size:15px;&quot;&gt;&lt;/i&gt;&lt;/a&gt;，关于主题 NexT 的，可以看 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://theme-next.js.org/docs/&quot;&gt;这里 &lt;i class=&quot;fa fa-arrow-up-right-from-square&quot; style=&quot;font-size:15px;&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你是的阅读目的是准备第一次使用 Hexo 搭博客，可以遵照本文提示看。&lt;br&gt;如果你准备美化你的 Hexo（最好且主题为 NexT）的博客，可以跳到&lt;a href=&quot;#更多修改&quot;&gt;&lt;i class=&quot;fa fa-hashtag fa-sm&quot;&gt;&lt;/i&gt;更多高阶美化&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p style=&quot;color:#428bca;margin-bottom:0px;font-weight:bold;&quot;&gt;操作系统的异同&lt;/p&gt;
&lt;span&gt;各种操作系统的过程基本一致。本文中的安装环境的主要做法是直接通过官网下载安装，其他下载方法也可行，这里不列举。&lt;/span&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://joywonderful.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>消失效果</title>
    <link href="https://joywonderful.github.io/posts/erase-css/"/>
    <id>https://joywonderful.github.io/posts/erase-css/</id>
    <published>2023-12-16T01:58:12.000Z</published>
    <updated>2023-12-16T07:06:43.199Z</updated>
    
    <content type="html"><![CDATA[<p>从 ncase.me 学来的，可以自己看源码。主要是通过<strong>背景图片</strong>的位置实现。结合了 CSS 和 JS。<br>可以自己增加一个函数在隐藏时执行。<br>你只要这样就可以：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    美好的文字</span><br><span class="line">    Have a good day!</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scratcher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码和示例请看下面。</p><span id="more"></span><h2 id="代码和使用方法"><a href="#代码和使用方法" class="headerlink" title="代码和使用方法"></a>代码和使用方法</h2><p>模拟的笔涂白是通过 CSS 背景图片的位置完成的。代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scratcher</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://s2.loli.net/2023/12/16/NOVHCgALzK4Fd1Q.png</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">2000%</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>width</code> <code>height</code> 设为 100% 是为了铺满元素（整个使用时用到），<code>z-index</code> 进行覆盖。<br>使用时请添加 <code>&lt;div class=&quot;scratcher&quot;&gt;&lt;/div&gt;</code> 在准备显示隐藏的元素<strong>内</strong>，使其成为准备隐藏的元素的<strong>子元素</strong>，方便更改容器的位置。下面的 JS 会更改它的位置和大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.scratcher&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    divList[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    divList[i].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">&quot;-100% -1900%&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> lpnt = divList[i].<span class="property">parentNode</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(lpnt).<span class="property">position</span> == <span class="string">&quot;relative&quot;</span>) &#123;</span><br><span class="line">        divList[i].<span class="property">style</span>.<span class="property">bottom</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        divList[i].<span class="property">style</span>.<span class="property">right</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        divList[i].<span class="property">style</span>.<span class="property">top</span> = <span class="title class_">String</span>(lpnt.<span class="property">offsetTop</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        divList[i].<span class="property">style</span>.<span class="property">left</span> = <span class="title class_">String</span>(lpnt.<span class="property">offsetLeft</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    divList[i].<span class="property">style</span>.<span class="property">width</span> = <span class="title class_">String</span>(lpnt.<span class="property">offsetWidth</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    divList[i].<span class="property">style</span>.<span class="property">height</span> = <span class="title class_">String</span>(lpnt.<span class="property">offsetHeight</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了应对相对定位这种特殊情况，代码中也进行了判断。其他情况则是设置相同大小和位置（<code>left</code>,<code>top</code>），覆盖其父元素。<br>进行擦除和显示时，也采用 JS，自己可以在下面的代码中添加隐藏后执行的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.scratcher&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eraseAndShow</span>(<span class="params">num</span>) &#123; <span class="comment">// 这里是第 num 个覆盖元素</span></span><br><span class="line">    divList[num].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            divList[num].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">`0% <span class="subst">$&#123;i * -<span class="number">100</span>&#125;</span>%`</span>; <span class="comment">// 更改背景位置</span></span><br><span class="line">        &#125;, i * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这里可以添加准备执行的函数，使用 `setTimeout` 设置延时为 1900 毫秒。</span></span><br><span class="line">    <span class="comment">// 例如：</span></span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;myFunction();&#125;, 1900);</span></span><br><span class="line">    <span class="comment">// 或者在第二行代码处添加参数，传递要执行的函数。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            divList[num].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">`-100% <span class="subst">$&#123;i * -<span class="number">100</span>&#125;</span>%`</span>;</span><br><span class="line">        &#125;, i * <span class="number">100</span> + <span class="number">2100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;divList[num].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;&#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在添加以上所有代码后，就可以在任意一个元素内添加 <code>&lt;div class=&quot;scratcher&quot;&gt;&lt;/div&gt;</code>，再在执行 JavaScript 代码 <code>eraseAndShow(0)</code>，试验性地查看效果。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面是一些示例，点击按钮“隐藏和显示”可以看到效果</p><style>    .scratcher {        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;        background: url(https://s2.loli.net/2023/12/16/NOVHCgALzK4Fd1Q.png);        background-size: 200% 2000%;        display: none;        z-index: 200;    }</style><p>以下文字在点击按钮后会被更改：</p><div id="theFirstExmDiv" style="height:16em;margin-bottom:2em;background-color:#eee;border-radius:3px;border:none;padding:.5em;">    <p style="margin-bottom:5px;">心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。</p>    <p style="margin-bottom:5px;">当你孤独时，风儿就是我的歌声，愿它能使你得到片刻的安慰；当你骄傲时，雨点就是我的警钟，愿它能使你获得永恒的谦逊。</p>    <p style="margin-bottom:5px;">友情如水，淡而长远；友情如茶，香而清纯；友情如酒，烈而沁心；友情如雨，细而连绵；友情如雪，松而亮洁。人生短暂，珍惜友情。</p>    <!-- 乱摘的甜鸡汤 -->    <a class="btn" id="hidebtn1" href="javascript:eraseAndShow(0, 1);" style="margin-top:0;">隐藏和显示</a>    <div class="scratcher"></div></div><p>由于是通过背景图片的位置模拟擦除效果，所以当点击按钮后在消失前按钮无法被点击。这个特性很好地使用在切换容器内容上。</p><p>以下是一个简单的示例：</p><div class="note danger"><p style="color:#d9534f;margin-bottom:0px;font-weight:bold;">danger #d9534f</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><a class="btn" id="hidebtn2" href="javascript:eraseAndShow(1);">隐藏和显示</a><div class="scratcher"></div></div><script>    var divList = document.querySelectorAll(".scratcher");    for(let i = 0; i < divList.length; i++) {        divList[i].style.display = "none";        divList[i].style.backgroundPosition = "-100% -1900%";        var lpnt = divList[i].parentNode;        if(window.getComputedStyle(lpnt).position == "relative") {            divList[i].style.bottom = "0";            divList[i].style.right = "0";        }        else {            divList[i].style.top = String(lpnt.offsetTop) + "px";            divList[i].style.left = String(lpnt.offsetLeft) + "px";        }        divList[i].style.width = String(lpnt.offsetWidth) + "px";        divList[i].style.height = String(lpnt.offsetHeight) + "px";    }    function eraseAndShow(num, a) {        divList[num].style.display = "block";        for(let i = 1; i <= 19; i++) {            setTimeout(() => {                divList[num].style.backgroundPosition = `0% ${i * -100}%`;            }, i * 100);        }        if(num == 0) {            if(a) {                setTimeout(() => {                    document.querySelectorAll("div#theFirstExmDiv p")[0].innerHTML = "112 files changed, 3471 insertions(+), 2065 deletions(-)";                    document.querySelectorAll("div#theFirstExmDiv p")[1].innerHTML = "Enumerating objects: 425, done.<br>Counting objects: 100% (425/425), done.";                    document.querySelectorAll("div#theFirstExmDiv p")[2].innerHTML = "Writing objects: 100% (227/227), 1.44 MiB | 875.00 KiB/s, done.<br>Total 227 (delta 111), reused 0 (delta 0), pack-reused 0";                    document.querySelector("div#theFirstExmDiv a.btn").innerHTML = "重新演示";                    document.querySelector("div#theFirstExmDiv a.btn").href = "javascript:eraseAndShow(0, 0);";                }, 1900);            }            else {                setTimeout(() => {                    document.querySelectorAll("div#theFirstExmDiv p")[0].innerHTML = "心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。";                    document.querySelectorAll("div#theFirstExmDiv p")[1].innerHTML = "当你孤独时，风儿就是我的歌声，愿它能使你得到片刻的安慰；当你骄傲时，雨点就是我的警钟，愿它能使你获得永恒的谦逊。";                    document.querySelectorAll("div#theFirstExmDiv p")[2].innerHTML = "友情如水，淡而长远；友情如茶，香而清纯；友情如酒，烈而沁心；友情如雨，细而连绵；友情如雪，松而亮洁。人生短暂，珍惜友情。";                    document.querySelector("div#theFirstExmDiv a.btn").innerHTML = "隐藏和显示";                    document.querySelector("div#theFirstExmDiv a.btn").href = "javascript:eraseAndShow(0, 1);";                }, 1900);            }        }        for(let i = 1; i <= 19; i++) {            setTimeout(() => {                divList[num].style.backgroundPosition = `-100% ${i * -100}%`;            }, i * 100 + 2100);        }        setTimeout(() => {divList[num].style.display = "none";}, 4000);    }</script><hr><p>希望对自己，对别人都有帮助！</p><!-- https://ncase.me/trust/ -->]]></content>
    
    
    <summary type="html">&lt;p&gt;从 ncase.me 学来的，可以自己看源码。主要是通过&lt;strong&gt;背景图片&lt;/strong&gt;的位置实现。结合了 CSS 和 JS。&lt;br&gt;可以自己增加一个函数在隐藏时执行。&lt;br&gt;你只要这样就可以：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    美好的文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Have a good day!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;scratcher&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代码和示例请看下面。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://joywonderful.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://joywonderful.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>并查集概念</title>
    <link href="https://joywonderful.github.io/posts/bichaj/"/>
    <id>https://joywonderful.github.io/posts/bichaj/</id>
    <published>2023-11-26T02:29:30.000Z</published>
    <updated>2023-12-23T04:11:21.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>又有好长时间没有写过课程笔记了啊~<br><span style="display:block;text-align:right">—— by JoyWonderful</span></p></blockquote><p><strong>并查集</strong>就是将一些集合融合，然后查询某个数字和某个数字是否在这个集合里<del>（蒟蒻奇怪的自我理解，大概也没人看这句话）</del>。<br>并查集有一个思想，一个元素的父亲为自己，这是<strong>初始化</strong>时会用到的。</p><span id="more"></span><p>并查集只有两种操作：</p><ul><li><strong>合并</strong>：将两个元素所在的集合合并；</li><li><strong>查找</strong>：两个元素是否都在同一个集合里。</li></ul><p>并查集的“集合”中有<a href="/posts/graph-tree" style="border-bottom:none">树</a>的概念，每一个集合就像是树，父亲就像父结点（根节点）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一个元素的父亲为自己，所以可以使用一个数组为 <code>fa</code>(father)，$fa_i$ 代表第 $i$ 个元素的父亲为 $fa$。所以，可以使用以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[<span class="number">10003</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// n 代表有 n 个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i; <span class="comment">// 开始时一个元素的父亲为自己</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>按照树来说，就是找到根节点。可以通过递归的方式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[num] == num) <span class="keyword">return</span> fa[num];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find</span>(fa[num]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>其实就是找到两个元素的根节点，然后将其中的一个设置为另一个的父亲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _union(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(fa[a])] = <span class="built_in">find</span>(fa[b]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>并查集最经典的就是亲戚问题。<br>例如：<br><a href="https://www.luogu.com.cn/problem/P1551" target="_blank">[洛谷 P1151] 亲戚</a><br><a href="https://www.luogu.com.cn/problem/P3367" target="_blank">[洛谷 P3367] 并查集</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;又有好长时间没有写过课程笔记了啊~&lt;br&gt;&lt;span style=&quot;display:block;text-align:right&quot;&gt;—— by JoyWonderful&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;并查集&lt;/strong&gt;就是将一些集合融合，然后查询某个数字和某个数字是否在这个集合里&lt;del&gt;（蒟蒻奇怪的自我理解，大概也没人看这句话）&lt;/del&gt;。&lt;br&gt;并查集有一个思想，一个元素的父亲为自己，这是&lt;strong&gt;初始化&lt;/strong&gt;时会用到的。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS 鼠标悬浮窗口效果</title>
    <link href="https://joywonderful.github.io/posts/hover-show/"/>
    <id>https://joywonderful.github.io/posts/hover-show/</id>
    <published>2023-11-12T03:45:14.000Z</published>
    <updated>2023-12-17T08:03:42.842Z</updated>
    
    <content type="html"><![CDATA[<p>最近弄的 github 卡片，弄了半天弄出来的鼠标悬浮显示文字的效果。使用 CSS 伪元素弄出来的小提示。但是不适合 <code>overflow: hidden;</code> 的元素。不管怎么说，还是很好用的，忘掉了就不太好，也就放到博客里来了。</p><span id="more"></span><table><thead><tr><th align="left">代码</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>&lt;span aria-label=&quot;左边提示&quot; balloon-shown=&quot;left&quot;&gt;鼠标&lt;/span&gt;</code></td><td align="left"><span aria-label="左边提示" balloon-shown="left">鼠标</span></td></tr><tr><td align="left"><code>&lt;span aria-label=&quot;右边提示&quot; balloon-shown=&quot;right&quot;&gt;悬浮&lt;/span&gt;</code></td><td align="left"><span aria-label="右边提示" balloon-shown="right">悬浮</span></td></tr><tr><td align="left"><code>&lt;span aria-label=&quot;上边提示&quot; balloon-shown=&quot;up&quot;&gt;文字&lt;/span&gt;</code></td><td align="left"><span aria-label="上边提示" balloon-shown="up">文字</span></td></tr><tr><td align="left"><code>&lt;span aria-label=&quot;上边提示&quot; balloon-shown=&quot;down&quot;&gt;提示&lt;/span&gt;</code></td><td align="left"><span aria-label="下边提示" balloon-shown="down">提示</span></td></tr></tbody></table><p>代码是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#202335</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#202335</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#202335</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="number">#202335</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* pointer-events: none; */</span> <span class="comment">/* 让鼠标无法悬浮在所弹出的伪元素上 */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">4s</span>, transform .<span class="number">4s</span>, visibility .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/* pointer-events: none; */</span> <span class="comment">/* 让鼠标无法悬浮在所弹出的伪元素上 */</span></span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#202335</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(aria-label);</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">4s</span>, transform .<span class="number">4s</span>, visibility .<span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;left&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;right&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;up&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>, <span class="selector-attr">[aria-label]</span><span class="selector-attr">[balloon-shown=<span class="string">&quot;down&quot;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">aria-label</span>=<span class="string">&quot;文字&quot;</span> <span class="attr">balloon-shown</span>=<span class="string">&quot;up&quot;</span><span class="attr">或</span>&quot;<span class="attr">down</span>&quot;<span class="attr">或</span>&quot;<span class="attr">left</span>&quot;<span class="attr">或</span>&quot;<span class="attr">right</span>&quot;&gt;</span>文字<span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近弄的 github 卡片，弄了半天弄出来的鼠标悬浮显示文字的效果。使用 CSS 伪元素弄出来的小提示。但是不适合 &lt;code&gt;overflow: hidden;&lt;/code&gt; 的元素。不管怎么说，还是很好用的，忘掉了就不太好，也就放到博客里来了。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://joywonderful.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>使用 SweetAlert2</title>
    <link href="https://joywonderful.github.io/posts/use-swal/"/>
    <id>https://joywonderful.github.io/posts/use-swal/</id>
    <published>2023-10-22T03:20:45.000Z</published>
    <updated>2023-10-22T08:58:18.020Z</updated>
    
    <content type="html"><![CDATA[<style>    button.exmSwal    {        background-color: #333;        color: #fff;        margin: .3125em;        padding: .625em 1.1em;        border: 0;        border-radius: .25em;        font-size: 1em;        transition: box-shadow .4s, background-color .3s;        line-height: 1.15;        cursor: pointer;    }    button.exmSwal[disabled]    {        background-color: #dfdfdf;        cursor: default;    }    button.exmSwal:focus    {        box-shadow: 0 0 0 3px rgba(51, 51, 51, .5);    }    button.exmSwal:hover[enabled]    {        background-color: #282828;    }    button.exmSwal:active[enabled]    {        background-color: #242424;    }</style><p><del>两个月没写文章了啊</del></p><p>最近新加了一个 SweetAlertJS，尝试使用一些简单的<del>啸</del>小实例来测试一下，同时是<del>教程，不是</del>备忘录。<br>首先，需要引用 js 源文件，我已经在 head 部分引入了，所以，可以直接来 <button class="exmSwal" name="1">尝试</button> 了。<br>代码就是这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;SweetAlert2&quot;</span>, <span class="string">&quot;这是一条由 SweetAlert2 呈现的提示框&quot;</span>);</span><br></pre></td></tr></table></figure><p>很简单，也很好看。比 alert 好多了（官方也这样说）。</p><span id="more"></span><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>有好多按钮我还没试过呢，今天就来学习和试一下。<br>你可以：</p><ul><li><strong>更改按钮文字</strong> <button class="exmSwal" id="2">更改了默认的 OK 和 Cancel</button></li><li><strong>更多按钮</strong> <button class="exmSwal" id="2">四个按钮</button></li><li><strong>决定按钮返回值</strong> <button class="exmSwal" id="2">演示</button></li></ul><p>最后再加一个：<button class="exmSwal" id="showTest">Toast 消息</button></p><p>代码 F12 看吧。</p><script>    const exmbtn = document.querySelectorAll("button.exmSwal");    function throttle(fn, interval, options = { leading: true, trailing: false }) {        const { leading, trailing, resultCallback } = options;        let lastTime = 0;        let timer = null;        const _throttle = function(...args) {            return new Promise((resolve, reject) => {                const nowTime = new Date().getTime();                if (!lastTime && !leading) lastTime = nowTime;                const remainTime = interval - (nowTime - lastTime);                if (remainTime <= 0) {                    if (timer) {                        clearTimeout(timer);                        timer = null;                    }                    const result = fn.apply(this, args);                    resolve(result);                    lastTime = nowTime;                    return;                }                else {                    Toast.fire({icon:"error", text:"请不要频繁点击按钮，会出 Bug 的", timer:interval - (nowTime - lastTime)});                    console.log(interval - (nowTime - lastTime));                    for(let i = 0; i < exmbtn.length; i++) {                        exmbtn[i].disabled = true;                        setTimeout(() => {exmbtn[i].disabled = false;}, interval - (nowTime - lastTime));                    }                }                if (trailing && !timer) {                    timer = setTimeout(() => {                        timer = null;                        lastTime = !leading ? 0: new Date().getTime();                        const result = fn.apply(this, args);                        resolve(result);                    }, remainTime);                }            });        }        return _throttle;    }    for(let i = 0; i < exmbtn.length; i++) {        exmbtn[i].addEventListener("click", throttle(showExample(i), 5000));    }    function showExample(num) {        return function() {            if(num == 0) {                Swal.fire("SweetAlert2", "这是一条由 SweetAlert2 呈现的提示框");            }            else if(num == 1) {                Swal.fire({                    title: "按钮文字",                    text: "下面有两个按钮，一个显示“哦，我知道了”，一个显示“不用你啰嗦”",                    confirmButtonText: "我知道了",                    showCancelButton: true,                    cancelButtonText: "不用你啰嗦"                });            }            else if(num == 2) {                Swal.fire({                    text: "下面有三个按钮，右上面有一个关闭",                    showCancelButton: true,                    showDenyButton: true,                    showCloseButton: true,                    cancelButtonText: "取消按钮",                    confirmButtonText: "确定按钮",                    denyButtonText: "拒绝按钮"                });            }            else if(num == 3) {                Swal.fire({                    showCancelButton: true,                    showDenyButton: true,                    showCloseButton: true,                    cancelButtonText: "取消按钮",                    confirmButtonText: "确定按钮",                    denyButtonText: "拒绝按钮",                    preConfirm: (text) => {                        Swal.fire("", "你点击了确定按钮", "success");                    },                    preDeny: () => {                        Swal.fire("", "你点击了拒绝按钮");                    }                }).then(((val) => {                    console.log(val);                    if(val.isDismissed)                    {                        var showstr = "";                        if(val.dismiss == "backdrop") showstr = "点击对话框外";                        else if(val.dismiss == "cancel") showstr = "取消按钮";                        else if(val.dismiss == "close") showstr = "右上角关闭小叉按钮";                        else if(val.dismiss == "esc") showstr = "按 ESC 键";                        Swal.fire({html:`你通过 <strong>${showstr}</strong> 关闭了消息框`});                    }                }));            }        }    }</script><script type="module">    const icon_list = ["success", "error", "warning", "info", "question"];    async function testSwal2Toast() {        for(let i = 0; i < exmbtn.length; i++) {            exmbtn[i].disabled = true;        }        for(let i = 0; i < 5; i++) {            await Toast.fire({icon:icon_list[i], text:icon_list[i]});        }        for(let i = 0; i < exmbtn.length; i++) {            exmbtn[i].disabled = false;        }    }    document.querySelector("button#showTest").addEventListener("click", testSwal2Toast);</script>]]></content>
    
    
    <summary type="html">&lt;style&gt;
    button.exmSwal
    {
        background-color: #333;
        color: #fff;
        margin: .3125em;
        padding: .625em 1.1em;
        border: 0;
        border-radius: .25em;
        font-size: 1em;
        transition: box-shadow .4s, background-color .3s;
        line-height: 1.15;
        cursor: pointer;
    }
    button.exmSwal[disabled]
    {
        background-color: #dfdfdf;
        cursor: default;
    }
    button.exmSwal:focus
    {
        box-shadow: 0 0 0 3px rgba(51, 51, 51, .5);
    }
    button.exmSwal:hover[enabled]
    {
        background-color: #282828;
    }
    button.exmSwal:active[enabled]
    {
        background-color: #242424;
    }
&lt;/style&gt;

&lt;p&gt;&lt;del&gt;两个月没写文章了啊&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;最近新加了一个 SweetAlertJS，尝试使用一些简单的&lt;del&gt;啸&lt;/del&gt;小实例来测试一下，同时是&lt;del&gt;教程，不是&lt;/del&gt;备忘录。&lt;br&gt;首先，需要引用 js 源文件，我已经在 head 部分引入了，所以，可以直接来 &lt;button class=&quot;exmSwal&quot; name=&quot;1&quot;&gt;尝试&lt;/button&gt; 了。&lt;br&gt;代码就是这个样子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Swal&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;fire&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;SweetAlert2&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;这是一条由 SweetAlert2 呈现的提示框&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;很简单，也很好看。比 alert 好多了（官方也这样说）。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://joywonderful.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://joywonderful.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 gdb 调试代码</title>
    <link href="https://joywonderful.github.io/posts/gdb-debug-file/"/>
    <id>https://joywonderful.github.io/posts/gdb-debug-file/</id>
    <published>2023-08-30T03:09:49.000Z</published>
    <updated>2023-08-30T03:09:49.055Z</updated>
    
    <content type="html"><![CDATA[<p>这几天刚去学习了一下用 gdb 调试代码，在这儿记下来。</p><p>首先，编译代码的时候需要加上 <code>-g</code> 选项，说明要加上调试信息，这样才可以正常调试。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -g oi.cpp -o oi.exe</span><br></pre></td></tr></table></figure><p>随后，即可使用 gdb 打开文件进行调试。直接使用 <code>gdb [file name]</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gdb oi</span><br><span class="line">GNU gdb (GDB) 7.8.1</span><br><span class="line">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line"><span class="comment"># ...[很多信息]</span></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from oi...done. <span class="comment"># 成功信息</span></span><br><span class="line">(gdb)  <span class="comment"># 现在可以键入调试命令了</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>gdb 一些常用调试命令（命令缩写）的详细解释：</p><h2 id="代码、路径"><a href="#代码、路径" class="headerlink" title="代码、路径"></a>代码、路径</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>命令缩写是 <code>l</code>。<br>可以查看代码，后面跟上数字说明要查看<strong>第几行附近的代码</strong>，或者跟上函数名说明要查看这个<strong>函数附近的代码</strong>。若没有参数则继续从上一次最后显示的那一行显示下去。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l 17</span><br><span class="line">12          <span class="keyword">for</span>(int i = 0; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">13          &#123;</span><br><span class="line">14              char l, r;</span><br><span class="line">15              <span class="keyword">if</span>((s[i] &gt;= &#x27;a&#x27; &amp;&amp; s[i] &lt;= &#x27;z&#x27;) || (s[i] &gt;= &#x27;<span class="number">0</span>&#x27; &amp;&amp; s[i] &lt;= &#x27;<span class="number">9</span>&#x27;))</span><br><span class="line">16              &#123;</span><br><span class="line">17                  l = s[i]; <span class="comment"># 这是代码外的注释：行显示在中间。</span></span><br><span class="line">18                  ans[cnt++] = s[i];</span><br><span class="line">19              &#125;</span><br><span class="line">20              <span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">21              &#123;</span><br><span class="line">(gdb) list main</span><br><span class="line">3</span><br><span class="line">4       int p1, p2, p3, cnt;</span><br><span class="line">5       char s[200];</span><br><span class="line">6       char ans[7000];</span><br><span class="line">7       int main()</span><br><span class="line">8       &#123;</span><br><span class="line">9           scanf(<span class="string">&quot;%d %d %d\n&quot;</span>, &amp;p1, &amp;p2, &amp;p3);</span><br><span class="line">10          scanf(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">11</span><br><span class="line">12          <span class="keyword">for</span>(int i = 0; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">(gdb) l <span class="comment"># 继续显示</span></span><br><span class="line">13          &#123;</span><br><span class="line">14              char l, r;</span><br><span class="line">15              <span class="keyword">if</span>((s[i] &gt;= &#x27;a&#x27; &amp;&amp; s[i] &lt;= &#x27;z&#x27;) || (s[i] &gt;= &#x27;<span class="number">0</span>&#x27; &amp;&amp; s[i] &lt;= &#x27;<span class="number">9</span>&#x27;))</span><br><span class="line">16              &#123;</span><br><span class="line">17                  l = s[i];</span><br><span class="line">18                  ans[cnt++] = s[i];</span><br><span class="line">19              &#125;</span><br><span class="line">20              <span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">21              &#123;</span><br><span class="line">22                  r = s[i + 1];</span><br></pre></td></tr></table></figure><h3 id="info-source"><a href="#info-source" class="headerlink" title="info source"></a>info source</h3><p>可以简写为 <code>i source</code><br>获取代码信息，可以查看 gdb 获取的代码路径是否正确。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info <span class="built_in">source</span></span><br><span class="line">Current <span class="built_in">source</span> file is oi.cpp</span><br><span class="line">Compilation directory is D:\MyCode</span><br><span class="line">Located <span class="keyword">in</span> D:\MyCode\oi.cpp</span><br><span class="line">Contains 65 lines.</span><br><span class="line">Source language is c++.</span><br><span class="line">Compiled with DWARF 2 debugging format.</span><br><span class="line">Does not include preprocessor macro info.</span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>参数是文件路径，可以重新打开一个文件调试。<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) file D:\\MyCode\\oi</span><br><span class="line">Reading symbols from D:\MyCode\oi...done.</span><br></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>同任何命令行的 cd 命令一样，切换工作文件夹。</p><h2 id="程序运行时"><a href="#程序运行时" class="headerlink" title="程序运行时"></a>程序运行时</h2><p><code>run</code> 命令。<br>命令缩写是 <code>r</code>。<br><strong>运行程序</strong>，直至遇到断点或程序结束。</p><p><code>print</code> 命令。<br>命令缩写是 <code>p</code>。<br>在<strong>程序运行</strong>时输出变量（数组）的值。</p><p><code>break</code> 命令。<br>命令缩写是 <code>b</code>，参数是行号或函数名。<br>表示在函数或第几行设置断点。<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> main</span><br><span class="line">Breakpoint 1 at 0x40153d: file oi.cpp, line 9.</span><br><span class="line">(gdb) b 43</span><br><span class="line">Breakpoint 2 at 0x401722: file oi.cpp, line 43.</span><br></pre></td></tr></table></figure><p><code>continue</code> 命令。<br>命令缩写是 <code>c</code>。<br>遇到断点后使用，<strong>继续执行</strong>，运行到下一个断点或程序结束。</p><p><code>delete</code> 命令。<br>命令缩写是 <code>d</code>。<br>删除断点，参数是<strong>断点编号</strong>。就是 <code>Breakpoint 1 at []: file [], line [].</code> Breakpoint 后面的数字。</p><p><code>next</code> 命令。<br>命令缩写是 <code>n</code>。<br>执行当前行语句，如果当前行有函数调用，则将其视为一个整体执行。</p><p>熟知以上这些，就可以简单地调试代码了。<br>一个实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> 25</span><br><span class="line">Breakpoint 1 at 0x4016b1: file oi.cpp, line 25.</span><br><span class="line">(gdb) <span class="built_in">break</span> 32</span><br><span class="line">Breakpoint 2 at 0x4016ea: file oi.cpp, line 32.</span><br><span class="line">(gdb) <span class="built_in">break</span> 35</span><br><span class="line">Breakpoint 3 at 0x4016fe: file oi.cpp, line 35.</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: D:\MyCode\oi.exe</span><br><span class="line">[New Thread 37568.0x97c8]</span><br><span class="line">[New Thread 37568.0x25fc]</span><br><span class="line">2 3 2</span><br><span class="line">a-d-d</span><br><span class="line"></span><br><span class="line">Breakpoint 2, main () at oi.cpp:33</span><br><span class="line">33                          l = l - <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">(gdb) <span class="built_in">print</span> p1</span><br><span class="line"><span class="variable">$2</span> = 2</span><br><span class="line">(gdb) <span class="built_in">print</span> p2</span><br><span class="line"><span class="variable">$3</span> = 3</span><br><span class="line">(gdb) p p3</span><br><span class="line"><span class="variable">$4</span> = 2</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 3, main () at oi.cpp:37</span><br><span class="line">37                  <span class="keyword">if</span>(p3 == 1)</span><br><span class="line">(gdb) <span class="built_in">print</span> l</span><br><span class="line"><span class="variable">$5</span> = 65 <span class="string">&#x27;A&#x27;</span></span><br><span class="line">(gdb) <span class="built_in">print</span> r</span><br><span class="line"><span class="variable">$6</span> = 68 <span class="string">&#x27;D&#x27;</span></span><br><span class="line">(gdb) <span class="built_in">continue</span></span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at oi.cpp:25</span><br><span class="line">25                      ans[cnt++] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">(gdb) <span class="built_in">print</span> ans[cnt - 1]</span><br><span class="line"><span class="variable">$7</span> = 100 <span class="string">&#x27;d&#x27;</span></span><br><span class="line">(gdb) <span class="built_in">print</span> ans</span><br><span class="line"><span class="variable">$8</span> = <span class="string">&quot;aCCCBBBd&quot;</span>, <span class="string">&#x27;\000&#x27;</span> &lt;repeats 6991 <span class="built_in">times</span>&gt;</span><br><span class="line">(gdb) <span class="built_in">continue</span></span><br><span class="line">Continuing.</span><br><span class="line">aCCCBBBd-d</span><br><span class="line">[Thread 37568.0x25fc exited with code 0]</span><br><span class="line">[Inferior 1 (process 37568) exited normally] <span class="comment"># 程序结束</span></span><br></pre></td></tr></table></figure><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><p>获取信息通常使用 <code>info</code> 命令。就介绍常用的那些。</p><p><code>info breakpoint</code><br>可以简写为 <code>i b</code>，查看断点信息。</p><p><code>info registers</code><br>可以简写为 <code>i reg</code>，查看寄存器信息。</p><p><code>info stack</code><br>可以简写为 <code>i s</code>，查看堆栈使用，在递归的时候很有效。</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info breakpoint</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x000000000040153b <span class="keyword">in</span> dfs(int) at oi.cpp:10</span><br><span class="line">        breakpoint already hit 5 <span class="built_in">times</span></span><br><span class="line">2       hw watchpoint  keep y                      x</span><br><span class="line">(gdb) info reg</span><br><span class="line">rax            0x4      4</span><br><span class="line">rbx            0x1      1</span><br><span class="line">rcx            0x4      4</span><br><span class="line">rdx            0x3      3</span><br><span class="line">rsi            0x11     17</span><br><span class="line">rdi            0xc41440 12850240</span><br><span class="line">rbp            0x6cfcf0 0x6cfcf0</span><br><span class="line">rsp            0x6cfcc0 0x6cfcc0</span><br><span class="line">r8             0xc43d10 12860688</span><br><span class="line">r9             0x1      1</span><br><span class="line">r10            0xc40000 12845056</span><br><span class="line">r11            0x6ceac0 7137984</span><br><span class="line">r12            0x1      1</span><br><span class="line">r13            0x8      8</span><br><span class="line">r14            0x0      0</span><br><span class="line">r15            0x0      0</span><br><span class="line">rip            0x40153b 0x40153b &lt;dfs(int)+11&gt;</span><br><span class="line">eflags         0x206    [ PF IF ]</span><br><span class="line">cs             0x33     51</span><br><span class="line">ss             0x2b     43</span><br><span class="line">ds             0x0      0 </span><br><span class="line">es             0x0      0 </span><br><span class="line">fs             0x0      0 </span><br><span class="line">gs             0x0      0</span><br><span class="line">(gdb) info stack</span><br><span class="line"><span class="comment">#0  dfs (x=10) at oi.cpp:10</span></span><br><span class="line"><span class="comment">#1  0x00000000004015b5 in dfs (x=9) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#2  0x00000000004015b5 in dfs (x=8) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#3  0x00000000004015b5 in dfs (x=7) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#4  0x00000000004015b5 in dfs (x=6) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#5  0x00000000004015b5 in dfs (x=5) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#6  0x00000000004015b5 in dfs (x=4) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#7  0x00000000004015b5 in dfs (x=3) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#8  0x00000000004015b5 in dfs (x=2) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#9  0x00000000004015b5 in dfs (x=1) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#10 0x00000000004015b5 in dfs (x=0) at oi.cpp:20</span></span><br><span class="line"><span class="comment">#11 0x000000000040163c in main () at oi.cpp:30</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>shell</code> 命令。<br>可以执行终端命令。</p><p><code>quit</code> 命令。<br>简写为 <code>q</code>。<br>退出 gdb 调试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天刚去学习了一下用 gdb 调试代码，在这儿记下来。&lt;/p&gt;
&lt;p&gt;首先，编译代码的时候需要加上 &lt;code&gt;-g&lt;/code&gt; 选项，说明要加上调试信息，这样才可以正常调试。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ g++ -g oi.cpp -o oi.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;随后，即可使用 gdb 打开文件进行调试。直接使用 &lt;code&gt;gdb [file name]&lt;/code&gt; 即可。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gdb oi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GNU gdb (GDB) 7.8.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copyright (C) 2014 Free Software Foundation, Inc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...[很多信息]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;string&quot;&gt;&amp;quot;apropos word&amp;quot;&lt;/span&gt; to search &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands related to &lt;span class=&quot;string&quot;&gt;&amp;quot;word&amp;quot;&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Reading symbols from oi...done. &lt;span class=&quot;comment&quot;&gt;# 成功信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb)  &lt;span class=&quot;comment&quot;&gt;# 现在可以键入调试命令了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="编译" scheme="https://joywonderful.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>记录：JavaScript 随机显示图片/随机数</title>
    <link href="https://joywonderful.github.io/posts/js-random-pic/"/>
    <id>https://joywonderful.github.io/posts/js-random-pic/</id>
    <published>2023-08-26T03:45:14.000Z</published>
    <updated>2023-12-17T02:28:03.807Z</updated>
    
    <content type="html"><![CDATA[<p>又是一个闲着没事干的随记。。。直接进入正题吧。</p><p>考虑使用数组存储图片的链接，然后随机显示。<br>随机显示数组图片自然需要随机数，而随机显示图片还需要查找元素，所以就写这些。</p><span id="more"></span><h2 id="生成从-0-到-n-的随机数"><a href="#生成从-0-到-n-的随机数" class="headerlink" title="生成从 0 到 n 的随机数"></a>生成从 0 到 n 的随机数</h2><p>JavaScript 有一个很强大的对象，<code>Math</code>，里面有很多属性以及方法，可以去看看 <a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">MDN Web Docs <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>。<br>这么多函数中，<code>Math.random()</code> 正是我们想要的函数，它可以生成小于 1 的随机（小）数。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">&lt;· <span class="number">0.8823149516270028</span></span><br></pre></td></tr></table></figure><p>但是，它生成的随机数没有界限，而且还是小数。那么，我们可以先进行取整，再对它设置界限。<code>Math</code> 对象有一个函数 <code>round()</code> 可以对小数进行四舍五入，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.4</span>)</span><br><span class="line">&lt;· <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;  <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)</span><br><span class="line">&lt;· <span class="number">2</span></span><br></pre></td></tr></table></figure><p>自然，<code>Math.round(Math.random())</code> 就可以确保随机数是整数了。至于限制，可以将 <code>Math.random()</code> 的结果乘上 n，就可以获取 0~n 的整数。例如，<code>Math.round(Math.random() * 7)</code> 可以获取 0~7 的随机数。</p><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><p>查找元素可以使用 <code>document.querySelectorAll(&quot;&quot;)</code> 来选择元素（选择器）。例如 <code>document.querySelectorAll(&quot;img&quot;);</code> 返回所有标签为 img 的元素。<br>例如：下面这段话的标签为 span，id 为 testsel，点击“更改文字”即可更改下面这段话。</p><script>    function testsele() {        var selp = document.querySelectorAll("span#testsel");        selp[0].innerHTML = "这段文字被更改过了。";    }</script><p style="border-radius:2px; border:1px solid #999;">    <span id="testsel" style="margin:2px;">我是一段文字。</span>    <br>    <a href="javascript:testsele()" class="btn" style="margin:5px;">更改文字</a></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selp = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;span#testsel&quot;</span>);</span><br><span class="line">selp[<span class="number">0</span>].<span class="property">innerHTML</span> = <span class="string">&quot;这段文字被更改过了。&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>结合上面的内容，就可以做随机显示图片了。</p><p>代码是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> picLink = [<span class="string">&quot;https://s2.loli.net/2023/12/16/pz9HK4SACUaNoOl.jpg&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/12/16/hNZeUdKxq79s3Rp.jpg&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/12/16/FSTYoytCWcxhQEv.jpg&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/12/16/8bCe5rYSxuoHKdh.jpg&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/02/03/T1FbVC6SEgcIxzi.png&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/12/16/onqcjm8YaxXZ4Ds.jpg&quot;</span>, <span class="string">&quot;https://s2.loli.net/2023/12/16/qZHx9oflL4wSjuv.jpg&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> imgSel = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img#random-pic&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> randomNumber = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (picLink.<span class="property">length</span>) - <span class="number">1</span>);</span><br><span class="line">imgSel[<span class="number">0</span>].<span class="property">src</span> = picLink[randomNumber];</span><br></pre></td></tr></table></figure><script>    function showRandomPic() {        var picLink = ["https://s2.loli.net/2023/12/16/pz9HK4SACUaNoOl.jpg", "https://s2.loli.net/2023/12/16/hNZeUdKxq79s3Rp.jpg", "https://s2.loli.net/2023/12/16/FSTYoytCWcxhQEv.jpg", "https://s2.loli.net/2023/12/16/8bCe5rYSxuoHKdh.jpg", "https://s2.loli.net/2023/02/03/T1FbVC6SEgcIxzi.png", "https://s2.loli.net/2023/12/16/onqcjm8YaxXZ4Ds.jpg", "https://s2.loli.net/2023/12/16/qZHx9oflL4wSjuv.jpg"];        var imgSel = document.querySelectorAll("img#random-pic");        var randomNumber = Math.round(Math.random() * (picLink.length - 1));        console.log("[INFO] randomNumber: " + randomNumber + "\n[INFO] picLink: " + picLink[randomNumber]);        imgSel[0].src = picLink[randomNumber];    }    window.addEventListener("load", showRandomPic);</script><p style="border-radius:2px; border:1px solid #999;">    <img id="random-pic" style="margin:3px; width:70%;" alt="img1" src="/images/icon.png">    <a href="javascript:showRandomPic()" class="btn" style="margin:5px;">换张图片？</a></p><h2 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h2><p style="border-radius:2px; border:1px solid #999;">    <img id="random-pic2" alt="img" style="margin:3px; width:70%;" src="/images/icon.png">    <a id="rdm-btn" class="btn" style="margin:5px;">换张图片？</a></p><script>    var imgArr = ["https://s2.loli.net/2023/12/16/pz9HK4SACUaNoOl.jpg", "https://s2.loli.net/2023/12/16/hNZeUdKxq79s3Rp.jpg", "https://s2.loli.net/2023/12/16/FSTYoytCWcxhQEv.jpg", "https://s2.loli.net/2023/12/16/8bCe5rYSxuoHKdh.jpg", "https://s2.loli.net/2023/02/03/T1FbVC6SEgcIxzi.png", "https://s2.loli.net/2023/12/16/onqcjm8YaxXZ4Ds.jpg", "https://s2.loli.net/2023/12/16/qZHx9oflL4wSjuv.jpg"];    function showRandomImage(ImgArray, Selector) {        return function() {            var imgSel = document.querySelectorAll(Selector);            var randomNumber = Math.round(Math.random() * (ImgArray.length - 1));            console.log("[INFO] randomNumber: " + randomNumber + "\n[INFO] picLink: " + ImgArray[randomNumber] + "\n[INFO] Listener return.");            imgSel[0].src = ImgArray[randomNumber];        }    }    const clkBtn = document.getElementById("rdm-btn");    clkBtn.addEventListener("click", showRandomImage(imgArr, "img#random-pic2"), false);</script><p>就改了一点点而已，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showRandomImage</span>(<span class="params">ImgArray, Selector</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imgSel = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="title class_">Selector</span>);</span><br><span class="line">    <span class="keyword">var</span> randomNumber = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="title class_">ImgArray</span>.<span class="property">length</span> - <span class="number">1</span>));</span><br><span class="line">    imgSel[<span class="number">0</span>].<span class="property">src</span> = <span class="title class_">ImgArray</span>[randomNumber];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，第一个参数填上图片链接的数组，第二个填上选择器。</p><p>如果想使用 <code>addEventListener</code> 可以这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showRandomImage</span>(<span class="params">ImgArray, Selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 二次封装</span></span><br><span class="line">        <span class="keyword">var</span> imgSel = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="title class_">Selector</span>);</span><br><span class="line">        <span class="keyword">var</span> randomNumber = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="title class_">ImgArray</span>.<span class="property">length</span> - <span class="number">1</span>));</span><br><span class="line">        imgSel[<span class="number">0</span>].<span class="property">src</span> = <span class="title class_">ImgArray</span>[randomNumber];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clkBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;rdm-btn&quot;</span>);</span><br><span class="line">clkBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="title function_">showRandomImage</span>(imgArr, <span class="string">&quot;img#random-pic2&quot;</span>), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>二次封装之后就可以正常使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一个闲着没事干的随记。。。直接进入正题吧。&lt;/p&gt;
&lt;p&gt;考虑使用数组存储图片的链接，然后随机显示。&lt;br&gt;随机显示数组图片自然需要随机数，而随机显示图片还需要查找元素，所以就写这些。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://joywonderful.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://joywonderful.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>scanf 和 printf 的格式符</title>
    <link href="https://joywonderful.github.io/posts/stdoi-snf-pnt/"/>
    <id>https://joywonderful.github.io/posts/stdoi-snf-pnt/</id>
    <published>2023-08-17T12:37:48.000Z</published>
    <updated>2023-08-20T06:57:23.514Z</updated>
    
    <content type="html"><![CDATA[<p>又是一个随记，方便自己的使用。C++ 中的 <code>scanf</code> 和 <code>printf</code> 其实有很多比 <code>cin</code> <code>cout</code> 好用的地方，放在这里。</p><span id="more"></span><h2 id="scanf-的使用"><a href="#scanf-的使用" class="headerlink" title="scanf 的使用"></a>scanf 的使用</h2><h3 id="读入的格式"><a href="#读入的格式" class="headerlink" title="读入的格式"></a>读入的格式</h3><p>就直接上表格吧，先把一些特定的读入格式符放在这儿：</p><details open><summary>格式符</summary><div class="tabs" id="scanf"><ul class="nav-tabs"><li class="tab active"><a href="#scanf-1">整数</a></li><li class="tab"><a href="#scanf-2">小数</a></li><li class="tab"><a href="#scanf-3">其他</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scanf-1"><table><thead><tr><th align="center">格式符</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center"><code>%d</code></td><td align="left">读入 int 整型</td></tr><tr><td align="center"><code>%ld</code></td><td align="left">读入 long 整型</td></tr><tr><td align="center"><code>%lld</code></td><td align="left">读入 long long 整型</td></tr><tr><td align="center"><code>%hd</code></td><td align="left">读入 short 整型</td></tr><tr><td align="center"><code>%u</code></td><td align="left">读入 unsigned int 整型</td></tr><tr><td align="center"><code>%lu</code></td><td align="left">读入 unsigned long 整型</td></tr><tr><td align="center"><code>%llu</code></td><td align="left">读入 unsigned long long 整型</td></tr></tbody></table></div><div class="tab-pane" id="scanf-2"><table><thead><tr><th align="center">格式符</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center"><code>%f</code></td><td align="left">读入 float 类型</td></tr><tr><td align="center"><code>%lf</code></td><td align="left">读入 double 类型</td></tr><tr><td align="center"><code>%Lf</code></td><td align="left">读入 long double 类型</td></tr></tbody></table></div><div class="tab-pane" id="scanf-3"><table><thead><tr><th align="center">格式符</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center"><code>%c</code></td><td align="left">读入 char 类型</td></tr><tr><td align="center"><code>%s</code></td><td align="left">读入字符串，也就是 char 数组</td></tr><tr><td align="center"><code>%o</code></td><td align="left">读入八进制整型</td></tr><tr><td align="center"><code>%x</code></td><td align="left">读入十六进制整型</td></tr></tbody></table></div></div></div></details><p>以上其实都是一些读入的格式。还有一些能让读入的格式更加丰富的格式化。</p><h3 id="限制位数"><a href="#限制位数" class="headerlink" title="限制位数"></a>限制位数</h3><p>在以上的任何格式符的 % 后面加上数字 n，即读入的位数就是 n。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%1d %1d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p>假设输入 10345 则会输出 1 0。</p><h3 id="只读入，不赋值"><a href="#只读入，不赋值" class="headerlink" title="只读入，不赋值"></a>只读入，不赋值</h3><p>在任何格式符的 % 后加上 *，就不会赋值给任何变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b;</span><br><span class="line"><span class="type">short</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %*lld %lld %hd&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %lld %hd&quot;</span>, a, b, c);</span><br></pre></td></tr></table></figure><p>假设输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2147483647 4294967295 11415612712638 128</span><br></pre></td></tr></table></figure><p>则输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2147483647 11415612712638 128</span><br></pre></td></tr></table></figure><p>可见，scanf 忽略了第二个数字 4294967295。</p><h2 id="printf-的使用"><a href="#printf-的使用" class="headerlink" title="printf 的使用"></a>printf 的使用</h2><p>其实它和 scanf 差不多。但是有多了精度，对齐什么的。</p><h3 id="标识和宽度"><a href="#标识和宽度" class="headerlink" title="标识和宽度"></a>标识和宽度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[标识][宽度]</span><br></pre></td></tr></table></figure><p>宽度其实和上面一样，只不过默认左对齐。标识就可以更改。</p><table><thead><tr><th align="center">标识</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>-</code></td><td align="left">将宽度的数字右对齐</td></tr><tr><td align="center"><code>+</code></td><td align="left">正数显示正号</td></tr><tr><td align="center"><code>#</code></td><td align="left">和 <code>%o</code> 带有八进制前缀 0，和 <code>%x</code> 带有十六进制前缀 0x</td></tr><tr><td align="center"><code>0</code></td><td align="left">将宽度的空格变成 0</td></tr></tbody></table><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c, d, e, f;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|%010d|%10d|%-10d|\n&quot;</span>, a, b, c);  <span class="comment">// |往左填零      |宽度为十            |靠左                 |</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|%+10d|%#10o|%#10x|\n&quot;</span>, d, e, f); <span class="comment">// |若正数显示正号|更改为八进制，有0前缀|更改为十六进制，有0x前缀|</span></span><br><span class="line"><span class="comment">// 宽度全部为十。</span></span><br></pre></td></tr></table></figure><p>假设输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19283 1983 1283 12873 83287 7283</span><br></pre></td></tr></table></figure><p>则会输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|0000019283|      1983|1283      |</span><br><span class="line">|    +12873|   0242527|    0x1c73|</span><br></pre></td></tr></table></figure><h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>用于小数，用 .n 标识保留 n 为小数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, p); <span class="comment">// 保留三位小数</span></span><br></pre></td></tr></table></figure><p>假设输入 114514.1919810 会输出 114514.192。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一个随记，方便自己的使用。C++ 中的 &lt;code&gt;scanf&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; 其实有很多比 &lt;code&gt;cin&lt;/code&gt; &lt;code&gt;cout&lt;/code&gt; 好用的地方，放在这里。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="语言入门" scheme="https://joywonderful.github.io/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>动态规划：01 背包</title>
    <link href="https://joywonderful.github.io/posts/dp-zobb/"/>
    <id>https://joywonderful.github.io/posts/dp-zobb/</id>
    <published>2023-08-16T11:21:10.000Z</published>
    <updated>2023-12-16T07:11:55.172Z</updated>
    
    <content type="html"><![CDATA[<p>背包问题是动态规划中很典型的一个问题。一个背包有特定的重量，去装重量为 w 价值为 d 的物品，在不超过背包重量上限的前提下使物品的价值和最高。<br>这个问题一看，就不是贪心可以做的来的。所以，就可以用上我们的<del>爆搜！！（暴力出奇迹）</del>动态规划来解决背包问题。</p><span id="more"></span><h2 id="从爆搜到记搜的引入"><a href="#从爆搜到记搜的引入" class="headerlink" title="从爆搜到记搜的引入"></a>从爆搜到记搜的引入</h2><p>自然，动规能解决的问题爆搜也一定能解决，无非慢了点儿而已。例如 [洛谷 P2871]，只需：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> w[<span class="number">3410</span>], d[<span class="number">3410</span>];</span><br><span class="line"><span class="type">int</span> maxn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dg</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tw, <span class="type">int</span> td)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tw &gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, td);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dg</span>(x + <span class="number">1</span>, tw + w[x], td + d[x]);</span><br><span class="line">    <span class="built_in">dg</span>(x + <span class="number">1</span>, tw, td);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个简单的爆搜就可以拿到 37 分。</p><p>进一步优化呢？可以考虑记忆化搜索。用 dp[i][j] 数组记录重量为 i 价值为 j 时的情况。由于需要记忆化，可以通过返回参数的形式。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dp[<span class="number">3410</span>][<span class="number">12883</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dg</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[x][tw]) <span class="keyword">return</span> dp[x][tw];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tw + w[x] &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">dg</span>(x + <span class="number">1</span>, tw + w[x]) + d[x];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x][tw] = <span class="built_in">max</span>(t, <span class="built_in">dg</span>(x + <span class="number">1</span>, tw));</span><br><span class="line">    <span class="keyword">return</span> dp[x][tw];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个程序可以拿到 82 分，9 10 两点超时，若开启 O2 优化变成超出内存限制。显然，这么大的数据数组的大小肯定炸掉。</p><h2 id="使用动态规划"><a href="#使用动态规划" class="headerlink" title="使用动态规划"></a>使用动态规划</h2><p>其实，通过上面的我们已经可以推出式子：<code>dp[i][j] = max(dp[i + 1][j + w[i]], dp[i + 1][j]);</code>，实现就很简单了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[<span class="number">3410</span>], d[<span class="number">3410</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">3410</span>][<span class="number">12883</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;w[i], &amp;d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j + w[i] &lt;= m)</span><br><span class="line">            &#123;</span><br><span class="line">                t = dp[i + <span class="number">1</span>][j + w[i]] + d[i];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(t, dp[i + <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次，不开 O2 也不会超时，但是内存仍然爆炸。</p><h2 id="滚动数组"><a href="#滚动数组" class="headerlink" title="滚动数组"></a>滚动数组</h2><p>可以发现，状态转移方程用过前面的数据之后，前面的数据就废弃了，因此，可以使用滚动数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[<span class="number">3410</span>], d[<span class="number">3410</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][<span class="number">12883</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;w[i], &amp;d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j - w[i] &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t = dp[<span class="number">1</span> - i % <span class="number">2</span>][j - w[i]] + d[i];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i % <span class="number">2</span>][j] = <span class="built_in">max</span>(t, dp[<span class="number">1</span> - i % <span class="number">2</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[n % <span class="number">2</span>][m]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;背包问题是动态规划中很典型的一个问题。一个背包有特定的重量，去装重量为 w 价值为 d 的物品，在不超过背包重量上限的前提下使物品的价值和最高。&lt;br&gt;这个问题一看，就不是贪心可以做的来的。所以，就可以用上我们的&lt;del&gt;爆搜！！（暴力出奇迹）&lt;/del&gt;动态规划来解决背包问题。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="搜索" scheme="https://joywonderful.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Git 的连接 Github 小记</title>
    <link href="https://joywonderful.github.io/posts/git-github/"/>
    <id>https://joywonderful.github.io/posts/git-github/</id>
    <published>2023-08-13T09:23:21.000Z</published>
    <updated>2023-08-13T07:18:04.152Z</updated>
    
    <content type="html"><![CDATA[<p>又是一个随记，方便自己使用的。<br>首先，得到 <a href="https://git-scm.com/downloads">官网下载</a>，随后测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git -v</span><br><span class="line">git version (VERSION)</span><br></pre></td></tr></table></figure><p>就下载好了。</p><span id="more"></span><h2 id="使用-SSH-连接-Github"><a href="#使用-SSH-连接-Github" class="headerlink" title="使用 SSH 连接 Github"></a>使用 SSH 连接 Github</h2><p>首先确保拥有一个 Github 账号，打开终端，生成 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><p>它的提示全部回车就可以了。”email” 是 Github 注册使用的邮箱地址。</p><p>成功后会在用户文件夹（Windows 下通常是 <code>%USERPROFILE%</code> 环境变量，Linux 直接打开 <code>~/</code>）下生成一个 <code>.ssh</code> 文件夹，打开 <code>id_rsa.pub</code> 文件，复制里面的密钥后回到 Github 打开设置，找到 “<strong>SSH anf PGP keys</strong>“ 一栏，点击 “New SSH key”，Title 填上，将刚刚复制的密钥粘贴到 “Key” 一栏，点击 “Add SSH key” 保存。</p><p><img src="https://s2.loli.net/2023/08/13/L3bmqAR1vf2whSM.png" alt="git-github.png"></p><p>随后可以验证是否完成，打开终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (IP ADDRESS)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is (FINGERPRINT).</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes #在这里输入 yes</span></span><br><span class="line"><span class="string">Hi (USER NAME)! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access. <span class="comment">#连接成功</span></span><br></pre></td></tr></table></figure><h2 id="连接-Github-仓库"><a href="#连接-Github-仓库" class="headerlink" title="连接 Github 仓库"></a>连接 Github 仓库</h2><p>新建 Github 仓库。在电脑新建一个文件夹，创建一些文件，然后打开终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /.git/</span><br><span class="line"></span><br><span class="line">$ git add (FILE NAME) <span class="comment">#你可以不断 add，也可以直接 git add .</span></span><br><span class="line">create mode 100644 (FILE NAME)</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;The commit information&quot;</span> <span class="comment">#建议 commit 信息用英文写详细，养成好习惯</span></span><br><span class="line"></span><br><span class="line">$ git branch -M main <span class="comment">#现在的 Github 默认为 main 分支</span></span><br><span class="line"></span><br><span class="line">$ git remote add origin git@github.com:(USER NAME)/(REPOSITORY NAME).git <span class="comment">#改成自己的用户名和仓库名</span></span><br><span class="line"></span><br><span class="line">$ git push -u origin main</span><br><span class="line">Enumerating objects: 7735, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (7735/7735), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (7413/7413), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (7735/7735), 55.74 MiB | 1.53 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 7735 (delta 2030), reused 0 (delta 0), pack-reused 0      </span><br><span class="line">remote: Resolving deltas: 100% (2030/2030), <span class="keyword">done</span>.</span><br><span class="line">To github.com:(USER NAME)/(REPOSITORY NAME).git</span><br><span class="line"> * [new branch]      main -&gt; main</span><br><span class="line">branch <span class="string">&#x27;main&#x27;</span> <span class="built_in">set</span> up to track <span class="string">&#x27;origin/main&#x27;</span>.</span><br></pre></td></tr></table></figure><p>打开 Github，可以看到 Commit 记录和提交的文件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一个随记，方便自己使用的。&lt;br&gt;首先，得到 &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;官网下载&lt;/a&gt;，随后测试一下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git version (VERSION)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;就下载好了。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://joywonderful.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>有关进制的一些小记</title>
    <link href="https://joywonderful.github.io/posts/jinzhi/"/>
    <id>https://joywonderful.github.io/posts/jinzhi/</id>
    <published>2023-08-12T02:00:41.000Z</published>
    <updated>2023-12-23T04:12:30.235Z</updated>
    
    <content type="html"><![CDATA[<style>    .TEX-B {        color: #000;    }</style><p>x 进制，代表着在这个计数方法中逢 x 进一，例如十进制就代表着<strong>逢十进一</strong>。<br>我们平常在生活中用的都是十进制。进制一类的东西在 OI 中也比较重要<del>CCF 喜欢考</del>，计算机中的数据都是以二进制储存的，二进制也完美地利用了每一个比特。当然，只要有足够的表示方法，人们可以弄出三十二进制、六十四进制，甚至一千进制。<del>闲的没事情干，</del>进制有关的以及进制之间的转换就是我想记下来的话题。</p><span id="more"></span><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="二进制和十进制的转换"><a href="#二进制和十进制的转换" class="headerlink" title="二进制和十进制的转换"></a>二进制和十进制的转换</h3><p>这是 <del>€€£</del> CCF 出的题中一定会多少考到一点的知识，比较重要。一般来说，x 进制的数记作 $(\text {number})_x$，例如二进制数 <span style="font-family:monospace;">1011</span> 记作 $(1011)_2$，十进制数 <span style="font-family:monospace;">114514</span> 记作 $(114514)_{10}$。</p><h4 id="二进制-gt-十进制"><a href="#二进制-gt-十进制" class="headerlink" title="二进制 -&gt; 十进制"></a>二进制 -&gt; 十进制</h4><p>二进制的数从右往左每一位都有权值，第 <span style="font-family:monospace;">i</span> 位的权值为 $2^{(i - 1)}$。举个例子：二进制数 <span style="font-family:monospace;">1011001</span> 的每一位权值是：<br>$\mathbf{1} \to 2^6 \ \ \ \mathbf{0} \to 2^5 \ \ \ \mathbf{1} \to 2^4 \ \ \ \mathbf{1} \to 2^3 \ \ \ \mathbf{0} \to 2^2 \ \ \ \mathbf{0} \to 2^1 \ \ \ \mathbf{1} \to 2^0$。</p><p>从二进制转换为十进制只需要将当前二进制位的值乘上权值即可。还是 <span style="font-family:monospace;">1011001</span>：</p><p>$$<br>\begin{aligned}<br>&amp;(1011001)_2<br>\\<br>&#x3D; &amp;(\mathbf{1} \times 2^6) + (\mathbf{0} \times 2^5) + (\mathbf{1} \times 2^4) + (\mathbf{1} \times 2^3) + (\mathbf{0} \times 2^2) + (\mathbf{0} \times 2^1) + (\mathbf{1} \times 2^0)<br>\\<br>&#x3D; &amp;64 + 0 + 16 + 8 + 0 + 0 + 1<br>\\<br>&#x3D; &amp;(89)_{10}<br>\end{aligned}<br>$$</p><p>可见，二进制 <span style="font-family:monospace;">1011001</span> 转换为十进制是 <span style="font-family:monospace;">89</span>。<br><del>话说 hexo next 的 mathjax 渲染越来越奇怪了。。。</del></p><h4 id="十进制-gt-二进制"><a href="#十进制-gt-二进制" class="headerlink" title="十进制 -&gt; 二进制"></a>十进制 -&gt; 二进制</h4><p>可以使用短除法，将十进制除以二取余，直至商为零。最后将取余的结果倒序输出。<br>比如说，还是那个数字 $(89)_{10}$：</p><p>$$<br>\begin{aligned}<br>2 \ | \underline{ \ \ \ \ \ \ \ \ } &amp;\underline{89 \ }<br>\\<br>2 \ | \underline{ \ \ \ \ \ \ \ } &amp;\underline{44 \ } \ \ \ \ \ \ \textbf{1}<br>\\<br>2 \ | \underline{ \ \ \ \ \ \ } &amp;\underline{22 \ } \ \ \ \ \ \ \textbf{0}<br>\\<br>2 \ | \underline{ \ \ \ \ \ } &amp;\underline{11 \ } \ \ \ \ \ \ \textbf{0}<br>\\<br>2 \ | \underline{ \ \ \ \ } &amp;\underline{\ \ 5 \ } \ \ \ \ \ \ \textbf{1}<br>\\<br>2 \ | \underline{ \ \ \ } &amp;\underline{\ \ 2 \ } \ \ \ \ \ \ \textbf{1}<br>\\<br>2 \ | \underline{ \ \ } &amp;\underline{\ \ 1 \ } \ \ \ \ \ \ \textbf{0}<br>\\<br>2 \ | &amp;\underline{\ \ 0 \ } \ \ \ \ \ \ \textbf{1}<br>\end{aligned}<br>$$</p><p>最后，倒着输出即可得知 $(89)_{10} &#x3D; (1011001)_2$ 。<br><del>ps: mathjax 没有特定的短除公式，只好用这种奇特的方法模拟短除。</del></p><div class="note info"><p style="color:#428bca;font-weight:bold;">P.S. 另一种更方便的双向转换方法</p><p><span style="margin-bottom: 0px;">可以发现，其实二进制十进制的互相转换都离不开 二的 i 次方，也可以将这张表记下来（也就是从右往左不断地乘二嘛），之后的转换会方便很多。</span><br>其实这张表也就是二的 i 次方：</p><p>$$… 256 \ \ 128 \ \ 64 \ \ 32 \ \ 16 \ \ 8 \ \ 4 \ \ 2 \ \ 1$$</p><div class="tabs" id="demo"><ul class="nav-tabs"><li class="tab active"><a href="#demo-1">二进制进制转十进制</a></li><li class="tab"><a href="#demo-2">十进制转二进制</a></li></ul><div class="tab-content"><div class="tab-pane active" id="demo-1"><p>这算是这张表最方便的用法了，还是 $(1011001)_2$</p><table><thead><tr><th align="center">每一位</th><th align="left">1</th><th align="left">0</th><th align="left">1</th><th align="left">1</th><th align="left">0</th><th align="left">0</th><th align="left">1</th></tr></thead><tbody><tr><td align="center">每一位对应的权值</td><td align="left">64</td><td align="left">32</td><td align="left">16</td><td align="left">8</td><td align="left">4</td><td align="left">2</td><td align="left">1</td></tr></tbody></table><p>一代表着要加起来，否则不加起来，那么，这个二进制数等于这个十进制数：<br>$(1011001)_2 &#x3D; 64 + 16 + 8 + 1 &#x3D; (89)_{10}$</p></div><div class="tab-pane" id="demo-2"><p>同样的，也可以一位一位地尝试累加。假如十进制减去奶味的权值不小于 0，就减去，否则不减去，直至加起来的权值之和等于目标十进制数。例如十进制数 89：  </p><table><thead><tr><th align="center">权值表</th><th align="left">64</th><th align="left">32</th><th align="left">16</th><th align="left">8</th><th align="left">4</th><th align="left">2</th><th align="left">1</th></tr></thead><tbody><tr><td align="center">是否减去</td><td align="left">1</td><td align="left">0</td><td align="left">1</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">1</td></tr><tr><td align="center">过程备注</td><td align="left">初始的值是 89，64 &lt; 89，就减去，89 - 64 &#x3D; 25。结果 <strong>1</strong>。</td><td align="left">32 &gt; 25，不减去。结果 <strong>0</strong>。</td><td align="left">16 &lt; 25，25 - 16 &#x3D; 9。结果 <strong>1</strong>。</td><td align="left">8 &lt; 9，9 - 8 &#x3D; 1。结果 <strong>1</strong>。</td><td align="left">4 &gt; 1。结果 <strong>0</strong>。</td><td align="left">2 &gt; 1。结果 <strong>0</strong>。</td><td align="left">1 &#x3D; 1，1 - 1 &#x3D; 0。结果 <strong>1</strong>。</td></tr></tbody></table><p>可见：<br>$(89)_{10} &#x3D; (1011001)_2$</p></div></div></div></div><h3 id="其他进制之间的转换"><a href="#其他进制之间的转换" class="headerlink" title="其他进制之间的转换"></a>其他进制之间的转换</h3><p>像其他进制，比如十六进制，大于 <span style="font-family:monospace;">9</span> 时就可以用字母 <span style="font-family:monospace;">A B C D E F</span> 按照顺序代替数字。</p><h4 id="使用十进制当作媒介的转换（对于所有进制通用）"><a href="#使用十进制当作媒介的转换（对于所有进制通用）" class="headerlink" title="使用十进制当作媒介的转换（对于所有进制通用）"></a>使用十进制当作媒介的转换（对于所有进制通用）</h4><p>其实，任何进制之间的转换都可以将那个进转换为十进制后再转换为目标进制。十进制也可以转换为任何进制。至于怎么转换，其实和 <a href="#二进制和十进制的转换"> <i class="fa-solid fa-hashtag" style="font-size:15px;"></i> 二进制和十进制之间的转换</a> 差不多。<br>同样的，x 进制转十进制 每一位的 每一位乘上每一位的权值 之和。例如：</p><p>$$<br>\begin{aligned}<br>&amp;(1021102)_3<br>\\<br>&#x3D; &amp;(\mathbf{1} \times 3^6) + (\mathbf{0} \times 3^5) + (\mathbf{2} \times 3^4) + (\mathbf{1} \times 3^3) + (\mathbf{1} \times 3^2) + (\mathbf{0} \times 3^1) + (\mathbf{2} \times 3^0)<br>\\<br>&#x3D; &amp;729 + 0 + 162 + 27 + 9 + 0 + 2<br>\\<br>&#x3D; &amp;929<br>\end{aligned}<br>$$</p><p>$x$ 进制的从右往左数（从 1 开始数）第 $i$ 位的权值就是 $x^{(i - 1)}$。转换为十进制只需要将每一位的 每一位的权值乘那一位的数 加起来即可。</p><p>十进制转 x 进制也可以用短除法，不断整除 x，取余，然后倒序输出。<br>照理说，将十进制作为媒介可以将任意进制转换为其他任意进制。<br>同样的，也可以通过代码更方便地实现（说一句，还是别人的代码写的好看，我写的屎山简直不忍直视，而且只能大到十六进制）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">xtoten</span><span class="params">(<span class="type">int</span> x, string s)</span> <span class="comment">// x 进制转十进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tensum = <span class="number">0</span>, cnt = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = s.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">// 从右往左求权值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>) t = <span class="number">0</span>; <span class="comment">// 屎山代码的本质。。。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;2&#x27;</span>) t = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;3&#x27;</span>) t = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;4&#x27;</span>) t = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;5&#x27;</span>) t = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;6&#x27;</span>) t = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;7&#x27;</span>) t = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;8&#x27;</span>) t = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;9&#x27;</span>) t = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;A&#x27;</span>) t = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;B&#x27;</span>) t = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;C&#x27;</span>) t = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;D&#x27;</span>) t = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;E&#x27;</span>) t = <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;F&#x27;</span>) t = <span class="number">15</span>;</span><br><span class="line">        tensum += t * <span class="built_in">pow</span>(x, cnt); <span class="comment">// $x$ 进制的从右往左数（从 1 开始数）第 $i$ 位的权值就是 $x^&#123;(i - 1)&#125;$。</span></span><br><span class="line">        cnt++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tensum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">tentoy</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> n)</span> <span class="comment">// 十进制转 x 进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ret = <span class="string">&quot;&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = n % y; <span class="comment">// 除以 x 剩下的余数</span></span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>) ret += <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 屎山依旧。。。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">1</span>) ret += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) ret += <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">3</span>) ret += <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">4</span>) ret += <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">5</span>) ret += <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">6</span>) ret += <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">7</span>) ret += <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">8</span>) ret += <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">9</span>) ret += <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">10</span>) ret += <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">11</span>) ret += <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">12</span>) ret += <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">13</span>) ret += <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">14</span>) ret += <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">15</span>) ret += <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        n /= y; <span class="comment">// 整除</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span> ; <span class="comment">// 除到零为止</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    string qwq;</span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; qwq &gt;&gt; m; <span class="comment">// n: x 进制;  qwq: 一个 x 进制的数;  m: 需要转换成的进制</span></span><br><span class="line">    </span><br><span class="line">    string ans = <span class="built_in">tentoy</span>(m, <span class="built_in">xtoten</span>(n, qwq));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = ans.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">// 十进制转 x 进制需要倒序输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比如输入  3 1021102 10  会输出  929。</span></span><br><span class="line"><span class="comment">// 其实这个代码就是 洛谷 P1143 的代码 https://www.luogu.com.cn/problem/P1143</span></span><br></pre></td></tr></table></figure><h4 id="将二进制转换为八进制、十六进制"><a href="#将二进制转换为八进制、十六进制" class="headerlink" title="将二进制转换为八进制、十六进制"></a>将二进制转换为八进制、十六进制</h4><p>注意一下，二进制并不可以直接转换为其他进制，只不过对于二进制转八进制、十六进制比较方便。若是这二进制转八进制或十六进制，要是嫌使用十进制作为媒介比较麻烦，那就可以用二进制作为媒介更加方便一些。  </p><p>将二进制转换为八进制，可以从右往左三位三位分开来，再将那三位二进制转换为十进制，合起来（注意是字符意义上的合起来）就是八进制。十六进制则是四位四位分开来。这里举两个例子：</p><div class="tabs" id="binhex"><ul class="nav-tabs"><li class="tab active"><a href="#binhex-1">二进制转八进制</a></li><li class="tab"><a href="#binhex-2">二进制转十六进制</a></li></ul><div class="tab-content"><div class="tab-pane active" id="binhex-1"><p>$$<br>\because<br>\underset{\text{八进制：}}{\text{二进制：}} ( \underset{1}{\underline{1}} \ \underset{2}{\underline{010}} \ \underset{7}{\underline{111}} )_{2}<br>$$</p><p>$$<br>\therefore<br>(1010111)_{2} &#x3D; (127)_{8}<br>$$</p></div><div class="tab-pane" id="binhex-2"><p>$$<br>\because<br>\underset{\text{十六进制：}}{\text{二进制：}} ( \underset{3}{\underline{11}} \ \underset{\text{A}}{\underline{1010}} \ \underset{1}{\underline{0001}} )_{2}<br>$$</p><p>$$<br>\therefore<br>(1110100001)_{2} &#x3D; (\text{3A1})_{16}<br>$$</p></div></div></div><div class="note info"><p style="color:#428bca;font-weight:bold;">P.S. 二进制、八进制、十进制、十六进制在 C++ 中的表示方法（前缀）</p><p>以上这些进制自然有自己的表示方法。其中，二进制以 <code>0b</code> 开头；八进制以 <code>0</code> 开头；十进制就是平常的写法，没有任何前缀；十六进制以 <code>0x</code> 开头。<br>例如，以下代码会输出四个 <code>2147483647</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, </span><br><span class="line">       <span class="number">0b1111111111111111111111111111111</span>,  <span class="comment">// 二进制</span></span><br><span class="line">       <span class="number">017777777777</span>,  <span class="comment">// 八进制</span></span><br><span class="line">       <span class="number">2147483647</span>,  <span class="comment">// 十进制</span></span><br><span class="line">       <span class="number">0x7fffffff</span>); <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure></div><h3 id="进制小数之间的转换"><a href="#进制小数之间的转换" class="headerlink" title="进制小数之间的转换"></a>进制小数之间的转换</h3><p>进制小数也是 CCF 要考的一点，恰好在某个模拟赛上做到了，更新一下下。</p><h4 id="十进制小数转-x-进制"><a href="#十进制小数转-x-进制" class="headerlink" title="十进制小数转 x 进制"></a>十进制小数转 x 进制</h4><p>简单来说就是小数点前面正常转换，小数点之后乘 x 取整，正常输出。例如十进制 0.3 转换为二进制：</p><p>$$<br>\begin{aligned}<br>&amp;0.3 \times 2 &#x3D; \mathbf{0}.6<br>\\<br>\text{二进制小数：}&amp;0.\mathbf{0}<br>\\<br>\\<br>&amp;0.6 \times 2 &#x3D; \mathbf{1}.2<br>\\<br>\text{二进制小数：}&amp;0.0\mathbf{1}<br>\\<br>\\<br>&amp;0.2 \times 2 &#x3D; \mathbf{0}.4<br>\\<br>\text{二进制小数：}&amp;0.01\mathbf{0}<br>\\<br>\\<br>&amp;0.4 \times 2 &#x3D; \mathbf{0}.8<br>\\<br>\text{二进制小数：}&amp;0.010\mathbf{0}<br>\\<br>\\<br>&amp;0.8 \times 2 &#x3D; \mathbf{1}.6<br>\\<br>\text{二进制小数：}&amp;0.0100\mathbf{1}<br>\\<br>\\<br>&amp;0.6 \times 2 &#x3D; \mathbf{1}.2<br>\\<br>\text{二进制小数：}&amp;0.01001\mathbf{1}<br>\\<br>\\<br>&amp;…<br>\end{aligned}<br>$$</p><p>最后可以得出：</p><p>$$<br>(0.3)_{10} &#x3D; (0.0\dot{1}00\dot{1})<br>$$</p><p>注：无限循环小数</p><h4 id="x-进制小数转十进制"><a href="#x-进制小数转十进制" class="headerlink" title="x 进制小数转十进制"></a>x 进制小数转十进制</h4><p>其实和整数位很像，不过从左往右第 i 位的权值是 -i。不写了吧。。。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算是一个比较<del>毒瘤</del>有趣的运算，是二进制的运算。当然也可以通过位运算做一些与平常的（逻辑）运算符等价的运算，但速度更快。</p><h3 id="按位与运算-amp"><a href="#按位与运算-amp" class="headerlink" title="按位与运算 &amp;"></a>按位与运算 <code>&amp;</code></h3><p>将两个二进制的每一位逐个比较，若这一位都为 1 则得出 1，否则得出 0。若这两个二进制数字位数不同可以在前面补零。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &amp; 1 = 1;</span><br><span class="line">0 &amp; 0 = 0;</span><br><span class="line">1 &amp; 0 = 0;</span><br><span class="line">0 &amp; 1 = 0;</span><br></pre></td></tr></table></figure><p>这个运算符还有一个备选关键字：<code>bitand</code>，比如 <code>10 &amp; 3</code> 等价于 <code>10 bitand 3</code>。<br>其实所有位运算也可以在 C++ 中用十进制直接运算，例如 <code>10 &amp; 3</code>，用 <code>0b</code> 前缀也行，也就是 <code>0b1010 &amp; 0b11</code> 或 <code>0b1010 &amp; 0b0011</code>。<br>举个更详细的例子：</p><p>$$<br>\begin{matrix}<br>&amp; 1011001 \\<br>\&amp; &amp; 0111101 \\<br>\hline<br>&amp; 0011001<br>\end{matrix}<br>$$</p><p>转为十进制就是 <span style="font-family:monospace;">89 &amp; 61 &#x3D; 15</span>。</p><h3 id="按位或运算"><a href="#按位或运算" class="headerlink" title="按位或运算 |"></a>按位或运算 <code>|</code></h3><p>两个二进制的每一位比较，若有一个为 1 则得出 1，否则得出 0。同样的，若这两个二进制数字位数不同可以在前面补零。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 | 1 = 1;</span><br><span class="line">0 | 0 = 0;</span><br><span class="line">1 | 0 = 1;</span><br><span class="line">0 | 1 = 1;</span><br></pre></td></tr></table></figure><p>这个运算符也有一个备选关键字 <code>bitor</code>，<code>10 | 3</code> 等价于 <code>10 bitor 3</code>。<br>例子：</p><p>$$<br>\begin{matrix}<br>&amp; 1011001 \\<br>| &amp; 0111101 \\<br>\hline<br>&amp; 1111101<br>\end{matrix}<br>$$</p><p>转为十进制就是 <span style="font-family:monospace;">89 | 61 &#x3D; 125</span>。</p><h3 id="按位非运算"><a href="#按位非运算" class="headerlink" title="按位非运算 ~"></a>按位非运算 <code>~</code></h3><p>这算是最简单的运算符了，即将每一位取反。例如 <code>~0</code> 就等于 1，<code>~1</code> 就等于 0。<br>例子：</p><p>$$<br>\begin{matrix}<br>\sim &amp; 0111101 \\<br>\hline<br>&amp; 1000010<br>\end{matrix}<br>$$</p><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或 ^"></a>按位异或 <code>^</code></h3><p>其实就是比较每一位是否相同，若相同为 <code>0</code>， 不相同为 <code>1</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 ^ 1 = 0; </span><br><span class="line">0 ^ 0 = 0; </span><br><span class="line">1 ^ 0 = 1; </span><br><span class="line">0 ^ 1 = 1;</span><br></pre></td></tr></table></figure><p>C++ 中也有备选关键字，就是 <code>xor</code>。<code>10 ^ 3</code> 等价于 <code>10 xor 3</code>。<br>例如：</p><p>$$<br>\begin{matrix}<br>&amp; 1011001 \\<br>\text{^} &amp; 0111101 \\<br>\hline<br>&amp; 1100100<br>\end{matrix}<br>$$</p><p>转为十进制就是 <span style="font-family:monospace;">89 ^ 61 &#x3D; 100</span>。</p><h3 id="左移-lt-lt-右移-gt-gt"><a href="#左移-lt-lt-右移-gt-gt" class="headerlink" title="左移 &lt;&lt; 右移 &gt;&gt;"></a>左移 <code>&lt;&lt;</code> 右移 <code>&gt;&gt;</code></h3><p>将所有二进制位全部左移，也就是将最左边的二进制位丢弃，右边补上一个 0。例如：<br><code>10110011 &lt;&lt; 1 = 01100110</code>。<br>右移也是一样，不过负数往左边补 1，正数补 0。</p><div class="note info"><p style="color:#428bca;font-weight:bold;">P.S. 位运算时赋值</p><p>同 <code>+=</code> <code>-=</code> 等符号一样，位运算也可以在符号后面加上 <code>=</code>，<code>&gt;&gt;=</code> <code>^=</code> <code>&amp;=</code> <code>&lt;&lt;=</code> <code>|=</code> 等运算符都是可以的。</p></div><div class="note info"><p style="color:#428bca;font-weight:bold;">P.S. 位运算的一些使用技巧</p>位运算其实有很多奇怪的应用。例如：<ol><li><strong>判断偶数奇数</strong>（能否被 2 整除）。0 是偶数 1 是奇数。<code>([number] &amp; 1) == 1</code> 相当于 <code>([number] % 2) == 1</code>，平常还是写 <code>[number] &amp; 1</code>。举个例子，<code>10 &amp; 1 = 0</code>、<code>13 &amp; 1 = 1</code>。</li><li><strong>求 2 的几次方</strong>，<code>1 &lt;&lt; [number]</code> 就是求 2 的 [number] 次方。例如 <code>1 &lt;&lt; 10 = sqrt(2, 10) = 1024</code>。</li><li><strong>交换 <code>a b</code> 两个数字</strong>。可以 <code>a ^= b; b ^= a; a ^= b</code>，效率比普通交换要高。</li><li><strong>正数变负数，负数变正数</strong>。假设一个数字 <code>n</code>，只需要 <code>~n + 1</code> 就可以转变该数正负号。例如 <code>~1024 + 1 = -1024</code>、<code>~-114 + 1 = 114</code>。（在 “补码” 中，详见下面的二进制编码）</li><li><strong>除以 2</strong>，使用 <code>[number] &gt;&gt; 1</code>。例如 <code>100 &gt;&gt; 1</code> 等价于 <code>100 / 2</code>，再比如 <code>int a = 1024; a &gt;&gt;= 1; printf(&quot;%d\n&quot;, a);</code> 输出 <code>512</code>。</li></ol><p>其他的应用，这里不写了，有兴趣可以去网上找更多的。</p></div><h2 id="二进制的编码"><a href="#二进制的编码" class="headerlink" title="二进制的编码"></a>二进制的编码</h2><p>其实，刚才讲的（个别除外）二进制都是二进制中编码的一种：<strong>原码</strong>。二进制一共有三个编码：<strong>原码</strong>、<strong>反码</strong>和<strong>补码</strong>，计算机中真正使用的是<strong>补码</strong>。<br>这些编码都要规定它们的位数，否则就弄不清楚到底是正数还是负数了。在下面的随记中，我用的是<strong>8 位整型</strong>。其实在 C++ 中，<code>int</code> 是 32 位整型。确定位数很重要，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>       a = <span class="number">0b11111111111111111111111111111111</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">0b11111111111111111111111111111111</span>; <span class="comment">// int a 格式化了一下，更方便看</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p>会输出 <code>-1 4294967295</code>。因为 <code>int</code> 是 32 位整型，而 <code>long long 是</code> 64 位。补码的第一位是符号位，若为 1 就是负数。而我给的二进制是 32 位，第一位是 1，<code>int</code> 就是负数。</p><p>原码、反码、补码的表示是将二进制用中括号括起来，再右下角写上 “原” “反”或“补”。例如 $[00001010]_{\text{原}}$、$[11101110]_{\text{补}}$。</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码、反码以及补码的最左边的那一位都是<strong>符号位</strong>。例如 $[00000001]_{\text{原}}$ 是十进制的 1，而 $[10000001]_{\text{原}}$ 是十进制的 -1。</p><p>在原码中，除符号位外，剩下的二进制都是按照 <a href="#二进制-gt-十进制"> <i class="fa-solid fa-hashtag" style="font-size:15px;"></i> 二进制转十进制</a> 一样。若符号位是 1 那就将转换的十进制加个负号。例如：</p><p>$$<br>\begin{aligned}<br>(5)_{10} &amp;&#x3D; [00000101]_{\text{原}}<br>\\<br>(-12)_{10} &amp;&#x3D; [10001100]_{\text{原}}<br>\end{aligned}<br>$$</p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>原码变成反码，若原码是正数（符号位为 0）则不需要做任何改变；若原码是负数（符号位为 1）则将除符号位以外的位全部取反。例如：</p><p>$$<br>\begin{aligned}<br>(24)_{10} &amp;&#x3D; [00011000]_{\text{原}} &#x3D; [00011000]_{\text{反}}<br>\\<br>(-17)_{10} &amp;&#x3D; [10010001]_{\text{原}} &#x3D; [11101110]_{\text{反}}<br>\end{aligned}<br>$$</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>其实这才是计算机真正使用的二进制编码，前面的两种编码基本上只供学习和理解用。</p><p>若那个二进制为正数，原码、反码和补码相同；若为负数，那么它的补码是它的反码加一。（请注意，二进制加法逢二进一）例如：</p><p>$$<br>\begin{aligned}<br>(27)_{10} &amp;&#x3D; [00011011]_{\text{原}} &#x3D; [00011011]_{\text{反}} &#x3D; [00011011]_{\text{补}}<br>\\<br>(-53)_{10} &amp;&#x3D; [10110101]_{\text{原}} &#x3D; [11001010]_{\text{反}} &#x3D; [11001011]_{\text{补}}<br>\end{aligned}<br>$$</p><div class="note info"><p style="color:#428bca;font-weight:bold;">P.S. 补码的快速转十进制方法</p><p>同普通二进制转十进制一样，可以弄一张差不多一样的表，不同的是，这张表的最左边的数（符号位）是负数。<br>还是以 8 位整型为例，这张表是这样的：</p><p>$$-128 \ \ 64 \ \ 32 \ \ 16 \ \ 8 \ \ 4 \ \ 2 \ \ 1$$</p><p>刚才的 -53 就可以以这种方法转换：</p><p>$$<br>\begin{aligned}<br>&amp;[11001011]_{\text{补}}<br>\\<br>&#x3D; &amp;-128 + 64 + 0 + 0 + 8 + 0 + 2 + 1<br>\\<br>&#x3D; &amp;(-53)_{10}<br>\end{aligned}<br>$$</p></div>]]></content>
    
    
    <summary type="html">&lt;style&gt;
    .TEX-B {
        color: #000;
    }
&lt;/style&gt;

&lt;p&gt;x 进制，代表着在这个计数方法中逢 x 进一，例如十进制就代表着&lt;strong&gt;逢十进一&lt;/strong&gt;。&lt;br&gt;我们平常在生活中用的都是十进制。进制一类的东西在 OI 中也比较重要&lt;del&gt;CCF 喜欢考&lt;/del&gt;，计算机中的数据都是以二进制储存的，二进制也完美地利用了每一个比特。当然，只要有足够的表示方法，人们可以弄出三十二进制、六十四进制，甚至一千进制。&lt;del&gt;闲的没事情干，&lt;/del&gt;进制有关的以及进制之间的转换就是我想记下来的话题。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="语言入门" scheme="https://joywonderful.github.io/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>数论：质数筛法</title>
    <link href="https://joywonderful.github.io/posts/shaifa/"/>
    <id>https://joywonderful.github.io/posts/shaifa/</id>
    <published>2023-08-08T06:34:23.000Z</published>
    <updated>2023-12-23T04:13:08.437Z</updated>
    
    <content type="html"><![CDATA[<p><strong>筛法</strong>是快速找出质数的一种方法。平常没有使用任何筛法的的找质数的时间复杂度通常为 $O(\sqrt n)$，比较慢，但是筛法更快一些。我们学的筛法是埃氏筛和欧拉筛(线性筛)。<br>平常的找质数方法是判断一个数是否能被 1 和它本生以外的数整除，但是筛法的思想不一样。筛法可以说是通常方法的逆向思维，挨个儿寻找当前数的倍数，打上标记，再继续寻找，最后没有被打上标记的就是质数。这种思想的时间复杂度快很多。</p><span id="more"></span><h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><p><strong>埃氏筛</strong>，全称其实是<strong>埃拉托斯特尼筛法 (Eratosthenes)</strong>。它的时间复杂度为 $O(n \log_2 \log_2 n)$，其实也就是刚才说的方法。这里放一个演示：</p><p style="overflow-x:auto; white-space:nowrap;"><span style="font-family:consolas,monospace;">    2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">这是初始的表</span>    <br>    <span style="font-weight:bold; color:#000000;">2</span> 3 <del style="color:#d9d9d9;">4</del> 5 <del style="color:#d9d9d9;">6</del> 7 <del style="color:#d9d9d9;">8</del> 9 <del style="color:#d9d9d9;">10</del> 11 <del style="color:#d9d9d9;">12</del> 13 <del style="color:#d9d9d9;">14</del> 15 <del style="color:#d9d9d9;">16</del> 17 <del style="color:#d9d9d9;">18</del> 19 <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">2 筛掉了 4 6 8 10 12 14 16 18 20，2 是质数</span>    <br>    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> 5 <del style="color:#d9d9d9;">6</del> 7 <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> 11 <del style="color:#d9d9d9;">12</del> 13 <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> 17 <del style="color:#d9d9d9;">18</del> 19 <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">3 筛掉了 6 9 12 15 18，3 是质数</span>    <br>    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">5 筛掉了 10 15 20，其实 5 已经大于 根号 20，剩下的数都是质数，可以退出了，但在这儿继续演示下去</span>    <br>    <span style="color:#e74c3c">-------------------- break; --------------------</span>  &ensp;&ensp;&ensp; <span style="font-family:LXGW WenKai Lite; color:#e74c3c">实际循环已经在这儿之前就退出了，但这里继续演示下去</span>    <br>    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">7 筛掉了 14，7 是质数</span>    <br>    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: LXGW WenKai Lite;">11 13 17 19 的倍数都不在数列中，它们都是倍数</span></span></p><p>最终，筛选出了 <code>2 3 5 7 11 13 17 19</code> 这 8 个质数。  </p><p>埃氏筛的代码也比较简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> TEMP = <span class="number">1e6</span> + <span class="number">3</span>; <span class="comment">// 需要筛的数字的数量</span></span><br><span class="line"><span class="type">int</span> flag[TEMP]; <span class="comment">// 记录是否是质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) <span class="comment">// 和普通的找质数一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i] == <span class="number">0</span>) <span class="comment">// 找质数的倍数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>; j &lt;= n; j += i) <span class="comment">// 从 i * 2 开始是因为不能标记质数，+= i 就是倍数</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">is_prime</span>(n);</span><br><span class="line">    FILE *fp = <span class="built_in">freopen</span>(<span class="string">&quot;./ans.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout); <span class="comment">// 测试文件用，可以注释掉。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i] == <span class="number">0</span>) <span class="comment">// 未被标记过，是质数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp); <span class="comment">// 测试文件用，可以注释掉。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>埃氏筛很快，上面数据 1000000 的代码一下就好了。<br>更具体的，可以去看一下 <a href="https://oi-wiki.org/math/number-theory/sieve/">OI Wiki</a>。</p><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><p>线性筛也叫<strong>欧拉筛</strong>，它的出现就是为了找到比埃氏筛还要快的筛法，是由欧拉发现的。在埃氏筛中，一个数可能会被筛很多次，上面的演示也表现出来了。而线性筛每个数只会筛一次，是 $O(n)$ 的时间复杂度。只不过一般来说埃氏筛也够用，一些卡掉埃氏筛的毒瘤数据除外，例如 <a href="https://www.luogu.com.cn/problem/P3383">洛谷 P3383</a>。</p><p>就按照 洛谷 P3383 来，代码是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> TEMP = <span class="number">1e8</span> + <span class="number">12</span>;</span><br><span class="line"><span class="type">bool</span> vis[TEMP];</span><br><span class="line"><span class="type">int</span> pri[TEMP], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            pri[cnt++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i * pri[j] &gt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % pri[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ns, q;</span><br><span class="line"><span class="type">int</span> ans[TEMP];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ns, &amp;q);</span><br><span class="line">    <span class="built_in">is_prime</span>(ns);</span><br><span class="line">    <span class="comment">// printf(&quot;done.\n&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int cnt = 0;</span></span><br><span class="line">    <span class="comment">// for(int i = 2; i &lt;= ns; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if(vis[i] == 0)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d\n&quot;, i);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;temp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pri[temp - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;筛法&lt;/strong&gt;是快速找出质数的一种方法。平常没有使用任何筛法的的找质数的时间复杂度通常为 $O(&#92;sqrt n)$，比较慢，但是筛法更快一些。我们学的筛法是埃氏筛和欧拉筛(线性筛)。&lt;br&gt;平常的找质数方法是判断一个数是否能被 1 和它本生以外的数整除，但是筛法的思想不一样。筛法可以说是通常方法的逆向思维，挨个儿寻找当前数的倍数，打上标记，再继续寻找，最后没有被打上标记的就是质数。这种思想的时间复杂度快很多。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    <category term="数论" scheme="https://joywonderful.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树和哈夫曼编码</title>
    <link href="https://joywonderful.github.io/posts/huff-tree/"/>
    <id>https://joywonderful.github.io/posts/huff-tree/</id>
    <published>2023-08-05T08:45:21.000Z</published>
    <updated>2023-12-17T01:19:51.344Z</updated>
    
    <content type="html"><![CDATA[<p>更前面的知识：<a style="border-bottom:none;" href="/posts/graph-tree">树的概念</a><br>先来说说前面的芝士：</p><ul><li><strong>路径长度</strong> 从根结点到目标结点经过的结点数量（边的数量）。</li><li><strong>权值</strong> 一个结点的权值可以是人为赋予的一个数。</li><li><strong>结点的带权路径长度</strong> 从根节点到当前结点的路径长度乘结点的权值。</li><li><strong>树的带权路径长度</strong> 整个树中叶子结点的带权路径长度总和。</li></ul><p>哈夫曼树是二叉树，且哈夫曼树的带权路径长度最小，哈夫曼编码会用到。</p><span id="more"></span><h2 id="哈夫曼树的构建"><a href="#哈夫曼树的构建" class="headerlink" title="哈夫曼树的构建"></a>哈夫曼树的构建</h2><p>前面写了，哈夫曼树的带权路径长度最小，若想带权路径最小，则权值小的结点的路径长，权值大的结点路径短。哈夫曼树构建的结点都必须是叶子结点，例如用 1 2 5 6 构建的哈夫曼树是这样的：<br><img src="https://s2.loli.net/2023/12/16/pcyXsqGt9DjiPQL.png" alt="哈夫曼树示例"><br>这个树的带权路径长度为 25。</p><p>构造过程：</p><ol><li>选出权值两个最小的结点合并；</li><li>将两个点从将要合并的结点序列中删除，加入两个结点的和；</li><li>重复以上步骤，直至达到要求。</li></ol><p>演示：<br><img src="https://s2.loli.net/2023/12/16/nZzqTchylwDC1Jj.png" alt="demo"></p><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>基于哈夫曼树，按照字符出现的频率（也就是哈夫曼树中的权值）进行二进制编码。<br>也就是用哈夫曼树对一串字符进行编码，可以认为左子树是 0，右子树是 1。（说不清楚啊）<br>哈夫曼编码是<strong>贪心</strong>的思想，为了使信息量最小化，可以用到哈夫曼树。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;更前面的知识：&lt;a style=&quot;border-bottom:none;&quot; href=&quot;/posts/graph-tree&quot;&gt;树的概念&lt;/a&gt;&lt;br&gt;先来说说前面的芝士：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径长度&lt;/strong&gt; 从根结点到目标结点经过的结点数量（边的数量）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权值&lt;/strong&gt; 一个结点的权值可以是人为赋予的一个数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结点的带权路径长度&lt;/strong&gt; 从根节点到当前结点的路径长度乘结点的权值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的带权路径长度&lt;/strong&gt; 整个树中叶子结点的带权路径长度总和。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈夫曼树是二叉树，且哈夫曼树的带权路径长度最小，哈夫曼编码会用到。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    <category term="树" scheme="https://joywonderful.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的前序、中序、后序遍历</title>
    <link href="https://joywonderful.github.io/posts/binarytree-fme/"/>
    <id>https://joywonderful.github.io/posts/binarytree-fme/</id>
    <published>2023-08-03T04:56:12.000Z</published>
    <updated>2023-08-03T05:01:53.986Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树的前序遍历中序遍历和后序遍历是比较重要的<del>CCF办的比赛要考（雾</del>。可以通过这三个遍历的顺序结果确定整个树的结构。前序遍历是<strong>根左右</strong>，中序遍历是<strong>左根右</strong>，后序遍历是<strong>左右根</strong>。（不想多写什么了）</p><h2 id="实践：前序遍历中序遍历确定树"><a href="#实践：前序遍历中序遍历确定树" class="headerlink" title="实践：前序遍历中序遍历确定树"></a>实践：前序遍历中序遍历确定树</h2><p>前序遍历：<code>1 2 4 3 5 6</code><br>中序遍历：<code>4 2 1 5 3 6</code></p><p>先来看前序，由于前序遍历的顺序是根左右，那么 <code>1</code> 一定是整个树的根节点。<span id="more"></span>随后在中序遍历找到 <code>1</code>，即可判断这个二叉树的左子树和右子树，就是这样分开来：<br>前序遍历：<code><span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #777; border-radius: 2px;">2 4</span> <span style="border: solid 1px #555; border-radius: 2px;">3 5 6</span></code><br>中序遍历：<code><span style="border: solid 1px #777; border-radius: 2px;">4 2</span> <span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #555; border-radius: 2px;">5 3 6</span></code><br>在继续分下去，得到：<br>前序遍历：<code><span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #777; border-radius: 2px;"><span style="border-bottom: solid 2px #ccc;">2</span> 4</span> <span style="border: solid 1px #555; border-radius: 2px;"><span style="border-bottom: solid 2px #111;">3</span> 5 6</span></code><br>中序遍历：<code><span style="border: solid 1px #777; border-radius: 2px;">4 <span style="border-bottom: solid 2px #ccc;">2</span></span> <span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #555; border-radius: 2px;">5 <span style="border-bottom: solid 2px #111;">3</span> 6</span></code></p><p>最终，得到这样一个树：<br><img src="https://s2.loli.net/2023/08/03/JqBMmjXIrFUk1L2.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;二叉树的前序遍历中序遍历和后序遍历是比较重要的&lt;del&gt;CCF办的比赛要考（雾&lt;/del&gt;。可以通过这三个遍历的顺序结果确定整个树的结构。前序遍历是&lt;strong&gt;根左右&lt;/strong&gt;，中序遍历是&lt;strong&gt;左根右&lt;/strong&gt;，后序遍历是&lt;strong&gt;左右根&lt;/strong&gt;。（不想多写什么了）&lt;/p&gt;
&lt;h2 id=&quot;实践：前序遍历中序遍历确定树&quot;&gt;&lt;a href=&quot;#实践：前序遍历中序遍历确定树&quot; class=&quot;headerlink&quot; title=&quot;实践：前序遍历中序遍历确定树&quot;&gt;&lt;/a&gt;实践：前序遍历中序遍历确定树&lt;/h2&gt;&lt;p&gt;前序遍历：&lt;code&gt;1 2 4 3 5 6&lt;/code&gt;&lt;br&gt;中序遍历：&lt;code&gt;4 2 1 5 3 6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先来看前序，由于前序遍历的顺序是根左右，那么 &lt;code&gt;1&lt;/code&gt; 一定是整个树的根节点。</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://joywonderful.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://joywonderful.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：队列和栈</title>
    <link href="https://joywonderful.github.io/posts/stackandqueue/"/>
    <id>https://joywonderful.github.io/posts/stackandqueue/</id>
    <published>2023-07-30T10:56:32.000Z</published>
    <updated>2023-12-16T07:14:53.609Z</updated>
    
    <content type="html"><![CDATA[<p>队列和栈都是线性数据结构，它们一个是先进先出，一个是先进后出，有着不同的使用场景。这两个数据结构基于链表，也可以用数组模拟这样的数据结构，通过 C++ 中 STL 提供的容器也可以更加方便快捷地实现。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><strong>队列 (queue)</strong> 是在一端插入另一段删除的线性表，遵循<strong>先进先出</strong>，类似于排队，可以称为先进先出 (FIFO) 表。队列中，允许入队 (enqueue) 的一端为队尾，允许出队 (dequeue) 的一端为队头。以后的<a style="border-bottom:none;">广度优先搜索</a>就会用到它。</p><span id="more"></span><h3 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h3><p>使用数组模拟队列需要一个存储数据的数组，同时用变量标记队头和队尾。<br>假设队列数组名为 <code>q</code>，头指针为 <code>ql</code>，尾指针为 <code>qr</code>，则：</p><p><strong>插入元素</strong>时，需要将队尾加上 1，假设元素为 <code>x</code>。结果：<code>q[++qr] = x;</code>；<br><strong>删除元素</strong>时，需要将队头指向下一个元素，由于这不是链表，直接执行即可。结果：<code>ql++;</code>；<br><strong>访问队首</strong>，直接 <code>q[ql];</code>；<br><strong>访问队尾</strong>，直接 <code>q[qr];</code>；<br><strong>清空队列</strong>时，头指针尾指针初始化，<code>ql = 1; qr = 0;</code>。</p><p>可见，数组模拟队列和数组模拟链表的缺点一样，内存不是动态分配的。这导致若数据过大则内存可能超出限制，若比数组的大小还大那就越界了，队列就溢出了。</p><h3 id="队列的溢出"><a href="#队列的溢出" class="headerlink" title="队列的溢出"></a>队列的溢出</h3><p>但由于数组是直接将队首队尾加来加去，可能会有队列（数组）前面还空着，但是队列溢出的情况这就叫做<strong>假溢出</strong>。若假溢出则需要使用循环队列，也就是说当尾指针超出数组，则将这一个元素从数组的开头放起。当然，若是真的全部存完了那有用的数据也会覆盖掉，这就是真溢出了。</p><h3 id="STL-queue"><a href="#STL-queue" class="headerlink" title="STL queue"></a>STL queue</h3><p>STL 提供的容器 <code>queue</code>，需要引入 <code>&lt;queue&gt;</code> 头文件。通过模板，定义形式是这样：<code>queue&lt;[value type]&gt; name</code>。<br>成员函数的使用：</p><ul><li><code>front()</code> 返回队首值。</li><li><code>back()</code> 返回队尾值。</li><li><code>push([value])</code> 元素入队。</li><li><code>pop()</code> 元素出队。</li><li><code>empty()</code> 返回布尔值，表示队列是否为空。</li><li><code>size()</code> 返回数值，表示队列里元素的数量。</li></ul><p>容器不会假溢出，但是若队列为空还要 <code>pop()</code> 就会溢出。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><strong>栈 (stack)<strong>是在同一端插入同一端弹出的表。元素可插入弹出的一段称为栈顶，另一端是栈底，遵循</strong>先进后出</strong>。</p><p>STL stack 容器需要引入 <code>&lt;stack&gt;</code> 头文件。成员函数有：<br><code>top()</code> 返回栈顶值<br><code>push([value])</code> 插入<br><code>pop()</code> 弹出<br><code>empty()</code> 是否为空栈<br><code>size()</code> 返回元素数量</p><p>同样的，容器没有上限，不会上溢出。但是若栈已空还要 <code>pop()</code> 就会造成<strong>下溢出</strong>。</p><hr><p><strong>附</strong>：visualgo 演示：  </p><ul><li>栈 <a href="https://visualgo.net/en/list?slide=4">https://visualgo.net/en/list?slide=4</a></li><li>队列 <a href="https://visualgo.net/en/list?slide=5">https://visualgo.net/en/list?slide=5</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;队列和栈都是线性数据结构，它们一个是先进先出，一个是先进后出，有着不同的使用场景。这两个数据结构基于链表，也可以用数组模拟这样的数据结构，通过 C++ 中 STL 提供的容器也可以更加方便快捷地实现。&lt;/p&gt;
&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;队列 (queue)&lt;/strong&gt; 是在一端插入另一段删除的线性表，遵循&lt;strong&gt;先进先出&lt;/strong&gt;，类似于排队，可以称为先进先出 (FIFO) 表。队列中，允许入队 (enqueue) 的一端为队尾，允许出队 (dequeue) 的一端为队头。以后的&lt;a style=&quot;border-bottom:none;&quot;&gt;广度优先搜索&lt;/a&gt;就会用到它。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="队列" scheme="https://joywonderful.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="数据结构" scheme="https://joywonderful.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索</title>
    <link href="https://joywonderful.github.io/posts/bfs/"/>
    <id>https://joywonderful.github.io/posts/bfs/</id>
    <published>2023-07-30T09:43:12.000Z</published>
    <updated>2023-07-30T08:37:24.091Z</updated>
    
    <content type="html"><![CDATA[<p>这不，刚学完<a style="border-bottom:none;" href="/posts/dfs">深搜</a>没多久，又来写广搜笔记了（话说我队列笔记还没来得急写呢）。<strong>广度优先搜索</strong>，广搜，英文为<strong>Breadth First Search</strong>，简称 <strong>BFS</strong>。是从一个结点向其他方向的结点不断扩散，如同一道水晕在湖面上荡漾开来。主要可以用来找路径<strong>权值一定</strong>的最短路径。<br>深搜可以用到队列先进先出的特性。当一个结点准备扩散时，即弹出队列，再将接下来扩散到结点加入队列。随后按照队首扩散、弹出，不断循环。这也是叫它广度优先搜索的原因。</p><span id="more"></span><p>例题：<a href="https://www.luogu.com.cn/problem/P2360">洛谷 P2360</a><br>广搜可以做，直接通过路径扩散就好。<br>代码：（想水博文 QwQ）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> l, r, c;</span><br><span class="line"><span class="type">char</span> themap[<span class="number">33</span>][<span class="number">33</span>][<span class="number">33</span>];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">33</span>][<span class="number">33</span>][<span class="number">33</span>], dist[<span class="number">33</span>][<span class="number">33</span>][<span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> bx[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>,  <span class="number">0</span>, <span class="number">0</span>,  <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> by[<span class="number">6</span>] = &#123;<span class="number">0</span>,  <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>,  <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> bz[<span class="number">6</span>] = &#123;<span class="number">0</span>,  <span class="number">0</span>, <span class="number">0</span>,  <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    node pdata;</span><br><span class="line">    pdata.x = x; pdata.y = y; pdata.z = z;</span><br><span class="line">    q.<span class="built_in">push</span>(pdata);</span><br><span class="line">    flag[x][y][z] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node p = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tx = p.x + bx[i];</span><br><span class="line">            <span class="type">int</span> ty = p.y + by[i];</span><br><span class="line">            <span class="type">int</span> tz = p.z + bz[i];</span><br><span class="line">            <span class="comment">//cout &lt;&lt; tx &lt;&lt; &quot; &quot; &lt;&lt; ty &lt;&lt; &quot; &quot; &lt;&lt; tz &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(tx &lt;= r &amp;&amp; tx &gt; <span class="number">0</span> &amp;&amp; ty &lt;= c &amp;&amp; ty &gt; <span class="number">0</span> &amp;&amp; tz &lt;= l &amp;&amp; tz &gt; <span class="number">0</span> &amp;&amp; flag[tx][ty][tz] == <span class="number">0</span> &amp;&amp; (themap[tx][ty][tz] == <span class="string">&#x27;.&#x27;</span> || themap[tx][ty][tz] == <span class="string">&#x27;E&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                node tdata;</span><br><span class="line">                tdata.x = tx;</span><br><span class="line">                tdata.y = ty;</span><br><span class="line">                tdata.z = tz;</span><br><span class="line">                q.<span class="built_in">push</span>(tdata);</span><br><span class="line">                flag[tdata.x][tdata.y][tdata.z] = <span class="number">1</span>;</span><br><span class="line">                dist[tdata.x][tdata.y][tdata.z] = dist[p.x][p.y][p.z] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">    <span class="type">int</span> sx, sy, sz;</span><br><span class="line">    <span class="type">int</span> ex, ey, ez;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= r; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= c; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; themap[j][k][i];</span><br><span class="line">                <span class="keyword">if</span>(themap[j][k][i] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sx = j;</span><br><span class="line">                    sy = k;</span><br><span class="line">                    sz = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(themap[j][k][i] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ex = j;</span><br><span class="line">                    ey = k;</span><br><span class="line">                    ez = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bfs</span>(sx, sy, sz);</span><br><span class="line">    <span class="keyword">if</span>(flag[ex][ey][ez] == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;Trapped!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Escaped in &quot;</span> &lt;&lt; dist[ex][ey][ez] &lt;&lt; <span class="string">&quot; minute(s).&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这不，刚学完&lt;a style=&quot;border-bottom:none;&quot; href=&quot;/posts/dfs&quot;&gt;深搜&lt;/a&gt;没多久，又来写广搜笔记了（话说我队列笔记还没来得急写呢）。&lt;strong&gt;广度优先搜索&lt;/strong&gt;，广搜，英文为&lt;strong&gt;Breadth First Search&lt;/strong&gt;，简称 &lt;strong&gt;BFS&lt;/strong&gt;。是从一个结点向其他方向的结点不断扩散，如同一道水晕在湖面上荡漾开来。主要可以用来找路径&lt;strong&gt;权值一定&lt;/strong&gt;的最短路径。&lt;br&gt;深搜可以用到队列先进先出的特性。当一个结点准备扩散时，即弹出队列，再将接下来扩散到结点加入队列。随后按照队首扩散、弹出，不断循环。这也是叫它广度优先搜索的原因。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="搜索" scheme="https://joywonderful.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="队列" scheme="https://joywonderful.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：树的概念与储存</title>
    <link href="https://joywonderful.github.io/posts/graph-tree/"/>
    <id>https://joywonderful.github.io/posts/graph-tree/</id>
    <published>2023-07-27T11:34:23.000Z</published>
    <updated>2023-12-23T04:12:17.806Z</updated>
    
    <content type="html"><![CDATA[<p><strong>树</strong>也是一种数据结构，它是<strong>非线性数据结构</strong>，它能很好地描述一个数据集合中的分支和层次，是一个比较重要的课题，以后的搜索和竞赛都有可能要用到它。树形结构的应用非常广泛，什么索引、语法结构。虽说概念比较繁琐 <del>老师讲了一个小时</del>。有点让人头疼（我咕了好多篇笔记了）。</p><h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><h3 id="前面"><a href="#前面" class="headerlink" title="前面"></a>前面</h3><p>前置芝士，简单说一下这些奇怪的名称：</p><ul><li>树中的每一个元素称为<strong>结点 node</strong>。</li><li>两个结点之间的线称为<strong>边 edge</strong>。</li><li>通过几条边，这几条边组成<strong>路径</strong>。</li></ul><span id="more"></span><p>树的结点一般画为圆圈，树若画出来也就是几个结点（圆）和几条边（线）组成的图，比较形象化，实际的树的储存方式是通过<a href="/posts/lianbiao" style="border-bottom:none;">链表</a>中的数据域将一个个结点（元素）连接起来，比较麻烦，后面再说。<br>还有一个概念：树的边的个数比树的结点的个数少一。也就是说，假设树的结点的个数为 $n$，则树的边的个数为 $n-1$。</p><h3 id="判断一张图是否为树"><a href="#判断一张图是否为树" class="headerlink" title="判断一张图是否为树"></a>判断一张图是否为树</h3><p>树最重要的就是<strong>每两个结点之间有且只有一条路径可以到达</strong>，也就是说，不可以形成环，不可以在一个树中无法到达所有结点。例如，下面就是一个树：<br><img src="https://s2.loli.net/2023/12/16/5UZo8kn4QAYD1F9.png" alt="graph-tree-1.png"><br>下面两张图不是树，他们分别违反了“不可以形成环”、“不可以在一个树中无法到达所有结点”。<br><img src="https://s2.loli.net/2023/12/16/VgfdiEJmDvSz2OB.png" alt="err-tree1"><br><img src="https://s2.loli.net/2023/12/16/SEGpmcFVrNv95w2.png" alt="err-tree2"></p><h3 id="更多的概念"><a href="#更多的概念" class="headerlink" title="更多的概念"></a>更多的概念</h3><p>首先放一张图：<br><img src="https://s2.loli.net/2023/12/16/O51sWLVJvfdu9ai.png" alt="lizi"></p><p>以这张图为例，来说下面的概念吧。<br><strong>根结点 root</strong>：根结点通常在最上方，是所有子结点的父结点。在上面的那张图中，结点 1 就是整张图的根结点。在上面的图中，根结点可以更换，也不会影响到什么，但是根结点一变就会让树形态发生变化（假如结点 2 是整个树的根结点，那么树会变<a href="#tree-root-node2">下面的图</a>）。一个树是必须要有根结点的，<span style="background-color:#efefef">根结点只有一个。</span><br><strong>父结点 parent（双亲结点） 子结点 child（孩子结点）</strong>：一个结点的分支就是那个结点的子结点，相反那个结点是分支结点的父结点。子结点通过父结点到达。例如结点 4 5 是结点 2 的子结点，结点 3 是结点 6 7 的父结点。<br><strong>兄弟结点</strong>：同一个父结点的子结点称为兄弟结点。例如结点 4 5 互为兄弟结点，6 7 互为兄弟结点。<br><strong>度</strong>：树的度就是一个结点子结点的个数。例如结点 2 的度就是 2，因为它只有两个子结点。<br><strong>深度</strong>：从<span style="background-color:#efefef">根结点</span>到当前结点的层数，根结点的深度是 1。例如，结点 1 深度为 1，结点 2 3 深度为 2，结点 4 5 6 7 深度为 3。<br><strong>叶子结点</strong>：一个结点的度为 0，就叫做叶子结点。例如结点 4 5 6 7 都是叶子结点。<br><strong>n 叉树</strong>：在树中，这个数是多少叉看度最多的结点，例如这个树就是二叉树（也比较特殊，后面讲）。<br><strong>子树</strong>：假设将树中任意一个度不为 0 的结点与它的父结点切断它们之间的边，那么断开的那一部分又能成为一个新的树，称为子树。例如结点 2 4 5 可以组成一个子树。</p><p>还有一大堆子子孙孙祖先的什么的，懒得写了。说真的，感觉说多了意义不大。</p><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>n 叉树中，又出现了一个<strong>二叉树 Binary Tree</strong> 这么个奇怪的概念。什么左子树右孩子什么的不记了，就讲三个我认为比较重要的。</p><p><strong>完美二叉树</strong>：<br>也叫做满二叉树。简单来说就是一个深度为 $n$ 的二叉树，拥有 $2^n - 1$ 个结点。看着的话就是若再增加一个结点使其继续为二叉树，深度就必须要加一了。刚才的示例图就是一个完美二叉树。<br><strong>完全二叉树</strong>：<br>完全二叉树的叶子结点可以不是满的，但是剩下的叶子结点必须都在图的左边。例如那张示例图若将结点 7 去掉，它就只是一个完全二叉树。<br><strong>完满二叉树</strong>：<br>完满二叉树的结点除了叶子结点以外其他结点的度都必须是 2。示例图若将结点 4 5 去掉，它就只是一个完满二叉树。</p><div class="note warning"><p style="color:#f0ad4e;font-weight:bold;">注意：</p>这三个概念极易弄混淆，稍不注意就忘了。完美二叉树一定也是完全二叉树和完满二叉树，但完满二叉树不一定是完全二叉树和完美二叉树。（别说他晕，我也晕了）</div><h2 id="树的储存"><a href="#树的储存" class="headerlink" title="树的储存"></a>树的储存</h2><p>一大堆基础概念，已经够呛了（悲）。学到树的储存已经开始逐渐迷惑。。。<br>一般来说，树也是不太可能用真正的指针链表来储存，毕竟太难写了，内存限制一般比时间限制够用一些，就用数组模拟链表。链表就是要关心指针域，下面就是一大堆奇奇怪怪的方法。</p><h3 id="可能用不到的"><a href="#可能用不到的" class="headerlink" title="可能用不到的"></a>可能用不到的</h3><div class="note info"><p style="color:#428bca;font-weight:bold;">备注：</p>一般来说，这些方法用不太到，要么炸时间要么炸空间要么难实现。所以就按这种奇特的分类方法分类了，反正感觉用不到。这句话也兼下面。</div><p><strong>父亲表示法</strong>：顾名思义，指针域指向父结点。<br><strong>孩子表示法</strong>：指针域指向子结点。<br><strong>父亲孩子表示法</strong>：双向链表结构，也没啥用。</p><div class="note danger"><p style="color:#d9534f;font-weight:bold;">上述缺点：</p>很明显，父亲法若寻找一个子结点可能要遍历整个表，很耗时间；孩子法度一大肯定爆内存，因为将每个子结点都存了下来；父亲孩子更糟糕，内存更大了，没有意义。</div><h3 id="可能会用到的"><a href="#可能会用到的" class="headerlink" title="可能会用到的"></a>可能会用到的</h3><p><strong>孩子兄弟表示法</strong>：适用于二叉树，也是一个双链表结构，一个结点连接其子结点和兄弟结点。<br><strong>邻接矩阵表示法</strong>：通过二维数组表示每个结点的关系，假设深度为 $k$，则空间复杂度为 $O(k^2)$。（已学废。。。）<br><strong>邻接表表示法</strong>：也叫链式前向星。（没弄太懂）</p><hr><p id="tree-root-node2">假设根结点为 2 时的情况：</p><p><img src="https://s2.loli.net/2023/12/16/HBYzUod6LN2vQay.png" alt="node2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;也是一种数据结构，它是&lt;strong&gt;非线性数据结构&lt;/strong&gt;，它能很好地描述一个数据集合中的分支和层次，是一个比较重要的课题，以后的搜索和竞赛都有可能要用到它。树形结构的应用非常广泛，什么索引、语法结构。虽说概念比较繁琐 &lt;del&gt;老师讲了一个小时&lt;/del&gt;。有点让人头疼（我咕了好多篇笔记了）。&lt;/p&gt;
&lt;h2 id=&quot;树的概念&quot;&gt;&lt;a href=&quot;#树的概念&quot; class=&quot;headerlink&quot; title=&quot;树的概念&quot;&gt;&lt;/a&gt;树的概念&lt;/h2&gt;&lt;h3 id=&quot;前面&quot;&gt;&lt;a href=&quot;#前面&quot; class=&quot;headerlink&quot; title=&quot;前面&quot;&gt;&lt;/a&gt;前面&lt;/h3&gt;&lt;p&gt;前置芝士，简单说一下这些奇怪的名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中的每一个元素称为&lt;strong&gt;结点 node&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;两个结点之间的线称为&lt;strong&gt;边 edge&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过几条边，这几条边组成&lt;strong&gt;路径&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://joywonderful.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://joywonderful.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>线性数据结构：链表的模板</title>
    <link href="https://joywonderful.github.io/posts/lianbiao/"/>
    <id>https://joywonderful.github.io/posts/lianbiao/</id>
    <published>2023-07-19T07:23:32.000Z</published>
    <updated>2023-07-25T00:18:46.776Z</updated>
    
    <content type="html"><![CDATA[<p>链表类似于数组，与数组不同的是，链表可以更加方便地更改数据和删除数据。数组若想将中间的数据删除，则要非很大功夫，而链表就不同了，它的操作更加简单一些（后面说）。</p><p>链表的数据组可以叫做“结点”，结点分成两个部分：一个是数据域，一个是指针域，数据域存数据，指针域指向下一个结点的数据地址。正是指针域将链表的每一个结点连在了一起。这种特性有一个好处：内存地址可以不连续，而数组的内存地址是必须要连续的。<br>比如内存还有 2GB 空闲，我申请了一个 1GB 大的数组，理论上是可以申请下来的，但占用的内存不一定完全是连续的。假设内存被一大堆东西占用的零零碎碎：确实有 2GB，但分成 4 个 500MB，这就申请不下来。而链表呢，可以充分利用内存碎片，通过指针变量，将分开的数据连在一起。</p><span id="more"></span><h2 id="普通的链表"><a href="#普通的链表" class="headerlink" title="普通的链表"></a>普通的链表</h2><p>链表还有一个好处：它是<strong>动态</strong>的，也就是说，使用的内存想申请就申请，想销毁就销毁(C&#x2F;C++中，其他语言我不确定)<br>，可以节约内存。<br>申请内存，可以用到 <code>&lt;malloc.h&gt;</code> 头文件中的 <code>malloc()</code> 函数，只有一个参数，填上你想要申请的内存大小(字节)，可以和 <code>sizeof</code> 一起用。但它返回的是 <code>void</code> 类型，所以最好在它前面加上一个类型强制转换。而销毁内存，则可以用到这个头文件中 <code>free()</code> 函数，一个参数，往里面填上地址（指针变量）即可销毁，但从此不可以再调用 使用这个内存的变量，若调用会报错，需要注意。</p><p>无论什么链表，还要有一个头指针，以便寻找元素时更好的去找。链表的结点一般用一个结构体，结构体里面一个是数据(<code>data</code>)，一个是存着下一个结点数据地址的指针变量(<code>next</code>)。<br>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node *head;</span><br></pre></td></tr></table></figure><p>首先说直接往末尾加上元素。先要判断链表是否为空，可以通过头指针 <code>head</code> 是否为空（<code>NULL</code>），若是第一个便创建新结点，申请为 <code>node</code> 类型的大小的内存，将那个结点的数据域赋值为加上的数据，再将结点的指针域设为 <code>NULL</code>（以防万一），将 <code>head</code> 设为新结点的地址。<br>否则通过指针域穷举当前指针域是否为 <code>NULL</code>，也就是最后一个元素，若到了最后一个元素，则申请内存，新建结点，数据域赋值，将上一个结点的指针域赋值为当前结点数据域的地址，将打钱结点指针域设为 <code>NULL</code>。<br>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node *New = (node *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">        (*New).x = data;</span><br><span class="line">        (*New).next = <span class="literal">NULL</span>;</span><br><span class="line">        head = New;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        node *s = head;</span><br><span class="line">        <span class="keyword">while</span>((*s).next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = (*s).next;</span><br><span class="line">        &#125;</span><br><span class="line">        node *New = (node *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">        (*New).x = data;</span><br><span class="line">        (*New).next = <span class="literal">NULL</span>;</span><br><span class="line">        (*s).next = New;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入也差不多，穷举到目标位置，申请内存，更改指针域。访问即是穷举，顺着指针走。更改数据还要穷举，将数据域改掉就好了。重点将删除。<br>首先，判断删除的是否是第一个，若是则将 <code>head</code> 更改为下一个结点的指针域。否则穷举目标，新建一个 <code>node</code> 类型的零时变量，将它赋值为删除目标的下一个结点的指针域，销毁准备删除的内存，将删除的地方的指针域赋值为那个零时变量。<br>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> <span class="comment">// 结点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; <span class="comment">// 数据</span></span><br><span class="line">    node *next; <span class="comment">// 下一个结点的地址</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node *head; <span class="comment">// 指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> data)</span> <span class="comment">// 往末尾追加元素，`data` 是要追加的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="comment">// 链表为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        node *New = (node *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node)); <span class="comment">// 申请内存</span></span><br><span class="line">        (*New).x = data; <span class="comment">// 存数据</span></span><br><span class="line">        (*New).next = <span class="literal">NULL</span>; <span class="comment">// 以防万一</span></span><br><span class="line">        head = New; <span class="comment">// 因为链表是空的，所以要给头指针赋值。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        node *s = head; <span class="comment">// 开始遍历</span></span><br><span class="line">        <span class="keyword">while</span>((*s).next != <span class="literal">NULL</span>) <span class="comment">// 条件的意思是不为链表的最后一个</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = (*s).next; <span class="comment">// 通过下一个结点的地址不但遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        node *New = (node *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node)); <span class="comment">// 同上的 `head==NULL`</span></span><br><span class="line">        (*New).x = data;</span><br><span class="line">        (*New).next = <span class="literal">NULL</span>;</span><br><span class="line">        (*s).next = New;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">// 插入， `x` 是要加的数据，`y` 表示在链表的第 `y` 个元素后插入数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *s = head;</span><br><span class="line">    y-- ;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (*s).next;</span><br><span class="line">        y-- ;</span><br><span class="line">    &#125;</span><br><span class="line">    node *New = (node *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">    (*New).x = x;</span><br><span class="line">    (*New).next = (*s).next;</span><br><span class="line">    (*s).next = New;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 返回链表的第 `x` 个结点的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *s = head;</span><br><span class="line">    x-- ;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (*s).next;</span><br><span class="line">        x-- ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*s).x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">// 更改链表第 `x` 个结点的数据域为 `y`</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *s = head;</span><br><span class="line">    x-- ;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (*s).next;</span><br><span class="line">        x-- ;</span><br><span class="line">    &#125;</span><br><span class="line">    (*s).x = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deletes</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 删除链表第 `x` 个结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        head = (*head).next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node *s = head;</span><br><span class="line">    x-- ;</span><br><span class="line">    x-- ;</span><br><span class="line">    <span class="keyword">while</span>(x--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (*s).next;</span><br><span class="line">        x-- ;</span><br><span class="line">    &#125;</span><br><span class="line">    node *t = (*((*s).next)).next; <span class="comment">// 零时指针变量，下下个结点的指针域</span></span><br><span class="line">    <span class="built_in">free</span>((*s).next); <span class="comment">// 销毁内存</span></span><br><span class="line">    (*s).next = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// main() 是示例</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">push</span>(<span class="number">100</span>); <span class="comment">// 在末尾追加 100</span></span><br><span class="line">    <span class="built_in">push</span>(<span class="number">200</span>); <span class="comment">// 在末尾追加 200</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">300</span>, <span class="number">1</span>); <span class="comment">// 在第一个结点的后面加上 300</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;first:%d, second:%d, third:%d\n&quot;</span>, <span class="built_in">find</span>(<span class="number">1</span>), <span class="built_in">find</span>(<span class="number">2</span>), <span class="built_in">find</span>(<span class="number">3</span>)); <span class="comment">// 链表现在为 100 300 200</span></span><br><span class="line">    <span class="built_in">deletes</span>(<span class="number">1</span>); <span class="comment">// 删掉第一个元素</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">400</span>, <span class="number">1</span>); <span class="comment">// 在第一个结点的后面插入 400</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;first:%d, second:%d, third:%d\n&quot;</span>, <span class="built_in">find</span>(<span class="number">1</span>), <span class="built_in">find</span>(<span class="number">2</span>), <span class="built_in">find</span>(<span class="number">3</span>)); <span class="comment">// 链表现在为 300 400 200</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然代码注释讲了，为了更清楚，再说一遍输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first:100, second:300, third:200</span><br><span class="line">first:300, second:400, third:200</span><br></pre></td></tr></table></figure><p><strong>附演示：</strong><a href="https://visualgo.net/zh/list">https://visualgo.net/zh/list</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;链表类似于数组，与数组不同的是，链表可以更加方便地更改数据和删除数据。数组若想将中间的数据删除，则要非很大功夫，而链表就不同了，它的操作更加简单一些（后面说）。&lt;/p&gt;
&lt;p&gt;链表的数据组可以叫做“结点”，结点分成两个部分：一个是数据域，一个是指针域，数据域存数据，指针域指向下一个结点的数据地址。正是指针域将链表的每一个结点连在了一起。这种特性有一个好处：内存地址可以不连续，而数组的内存地址是必须要连续的。&lt;br&gt;比如内存还有 2GB 空闲，我申请了一个 1GB 大的数组，理论上是可以申请下来的，但占用的内存不一定完全是连续的。假设内存被一大堆东西占用的零零碎碎：确实有 2GB，但分成 4 个 500MB，这就申请不下来。而链表呢，可以充分利用内存碎片，通过指针变量，将分开的数据连在一起。&lt;/p&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://joywonderful.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="基础算法" scheme="https://joywonderful.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://joywonderful.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++ 文件操作</title>
    <link href="https://joywonderful.github.io/posts/cpp-file/"/>
    <id>https://joywonderful.github.io/posts/cpp-file/</id>
    <published>2023-07-17T09:23:11.000Z</published>
    <updated>2023-07-17T09:02:58.632Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经用 Python 的 tkinter 库写过一个<a style="border-bottom:none;" href="https://github.com/JoyWonderful/My-Python-File/blob/main/text-txt.py">文本编辑器</a>，一百多行，当时幼稚的我以为自己很了不起，因为当时的我认为读写文件是一件很复杂的事情。后来看看，这个东西做得很蹩脚，一个简单的 <code>with open()</code> 就完成了读写文件的操作，可见文件的读写是个很平常的事情。当年的喜悦大概是学到读写文件的喜悦吧。<br>C++ 读写文件，也算是比较平常的。当数据点大的时候输出到文件里更方便。就在这里小记一下读写文件的操作。</p><span id="more"></span><hr><p><code>fstream</code> 有两个类，分别是 <code>ofstream</code> 和 <code>ifstream</code>。<code>ofstream</code> 是写文件的，<code>ifstream</code> 是读文件的。这是一个打开文件的语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file.<span class="built_in">open</span>(<span class="string">&quot;./text.txt&quot;</span>, ios::in | ios::out);</span><br><span class="line"></span><br><span class="line">[file object].<span class="built_in">open</span>([file path], [open mode]);</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> std::ofstream::<span class="built_in">open</span>(<span class="type">const</span> <span class="type">char</span> *__s, std::ios_base::openmode __mode);</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> std::ifstream::<span class="built_in">open</span>(<span class="type">const</span> <span class="type">char</span> *__s, std::ios_base::openmode __mode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="type">const</span> <span class="type">char</span>* __s, ios_base::openmode __mode = ios_base::in); <span class="comment">// ifstream</span></span><br><span class="line"><span class="built_in">open</span>(<span class="type">const</span> <span class="type">char</span>* __s, ios_base::openmode __mode = ios_base::out | ios_base::trunc); <span class="comment">// ofstream</span></span><br></pre></td></tr></table></figure><p>其中，<code>|</code> 可以将多个打开模式加在一起。打开模式有：</p><ol><li>常用的<ul><li><code>ios::in</code> 打开文件读取，用于 <code>ifstream</code>。</li><li><code>ios::out</code> 打开文件写入，用于 <code>ofstream</code>。</li></ul></li><li>不常用的<ul><li><code>ios::app</code> 将写入的内容追加在末尾。用于 <code>ofstream</code>。</li><li><code>ios::ate</code> 打开定位到末尾。用于 <code>ofstream</code>。</li><li><code>ios::trunc</code> 若文件存在，则覆盖文件，不保留原始内容。在 <code>ofstream</code> 中，默认是 <code>ios::trunc</code>。</li></ul></li></ol><p>当写入或读取文件时，和 <code>cin``cout</code> 差不多。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ofstream outfile;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    outfile.<span class="built_in">open</span>(<span class="string">&quot;./text.txt&quot;</span>, ios::out);</span><br><span class="line">    outfile &lt;&lt; <span class="string">&quot;text&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    outfile &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    outfile.<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会向当前目录下 <code>text.txt</code> 写入 <code>&quot;text\n&quot;</code> 和 <code>&quot;P\n&quot;</code>。<br>程序结束，最好<strong>关闭文件</strong>，使用 <code>[file object].close()</code>，虽然不关闭文件也没关系。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我曾经用 Python 的 tkinter 库写过一个&lt;a style=&quot;border-bottom:none;&quot; href=&quot;https://github.com/JoyWonderful/My-Python-File/blob/main/text-txt.py&quot;&gt;文本编辑器&lt;/a&gt;，一百多行，当时幼稚的我以为自己很了不起，因为当时的我认为读写文件是一件很复杂的事情。后来看看，这个东西做得很蹩脚，一个简单的 &lt;code&gt;with open()&lt;/code&gt; 就完成了读写文件的操作，可见文件的读写是个很平常的事情。当年的喜悦大概是学到读写文件的喜悦吧。&lt;br&gt;C++ 读写文件，也算是比较平常的。当数据点大的时候输出到文件里更方便。就在这里小记一下读写文件的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="编程随记" scheme="https://joywonderful.github.io/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="语言入门" scheme="https://joywonderful.github.io/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
